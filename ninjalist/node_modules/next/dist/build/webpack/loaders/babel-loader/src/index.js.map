{"version":3,"sources":["../../../../../../build/webpack/loaders/babel-loader/src/index.js"],"names":["babel","require","makeLoader","callback","overrides","source","inputSourceMap","cb","async","loader","call","then","args","err","tracer","withSpan","currentTraceSpan","span","startSpan","filename","resourcePath","setAttribute","loaderOptions","loaderUtils","getOptions","customOptions","result","map","custom","Object","prototype","hasOwnProperty","assign","sourceMaps","sourceMap","programmaticOptions","undefined","sourceFileName","caller","name","target","supportsStaticESM","supportsDynamicImport","supportsTopLevelAwait","cacheDirectory","cacheIdentifier","config","loadPartialConfig","options","cacheCompression","attributes","cache","babelrc","addDependency","code"],"mappings":"gEACA,oFACA,0CACA,sDACA,8D,mFAJA;AAMA;AACA,KAAMA,CAAAA,KAAK,CAAGC,OAAO,CAAC,+BAAD,CAArB,CAEe,QAASC,CAAAA,UAAT,CAAoBC,QAApB,CAA8B,CAC3C,KAAMC,CAAAA,SAAS,CAAGD,QAAQ,CAACH,KAAD,CAA1B,CAEA,MAAO,UAAUK,MAAV,CAAkBC,cAAlB,CAAkC,CACvC;AACA,KAAMC,CAAAA,EAAE,CAAG,KAAKC,KAAL,EAAX,CAEAC,MAAM,CAACC,IAAP,CAAY,IAAZ,CAAkBL,MAAlB,CAA0BC,cAA1B,CAA0CF,SAA1C,EAAqDO,IAArD,CACGC,IAAD,EAAUL,EAAE,CAAC,IAAD,CAAO,GAAGK,IAAV,CADd,CAEGC,GAAD,EAASN,EAAE,CAACM,GAAD,CAFb,EAID,CARD,CASD,CAED,cAAeJ,CAAAA,MAAf,CAAsBJ,MAAtB,CAA8BC,cAA9B,CAA8CF,SAA9C,CAAyD,CACvD;AACA,MAAOU,gBAAOC,QAAP,CAAgB,KAAKC,gBAArB,CAAuC,IAAM,CAClD,KAAMC,CAAAA,IAAI,CAAGH,eAAOI,SAAP,CAAiB,cAAjB,CAAb,CACA,MAAO,yBAAaD,IAAb,CAAmB,SAAY,CACpC,KAAME,CAAAA,QAAQ,CAAG,KAAKC,YAAtB,CACAH,IAAI,CAACI,YAAL,CAAkB,UAAlB,CAA8BF,QAA9B,EAEA,GAAIG,CAAAA,aAAa,CAAGC,qBAAYC,UAAZ,CAAuB,IAAvB,GAAgC,EAApD,CAEA,GAAIC,CAAAA,aAAJ,CACA,GAAIrB,SAAS,EAAIA,SAAS,CAACqB,aAA3B,CAA0C,CACxC,KAAMC,CAAAA,MAAM,CAAG,KAAM,yBACnBZ,eAAOI,SAAP,CAAiB,gCAAjB,CADmB,CAEnB,SACE,KAAMd,CAAAA,SAAS,CAACqB,aAAV,CAAwBf,IAAxB,CAA6B,IAA7B,CAAmCY,aAAnC,CAAkD,CACtDjB,MADsD,CAEtDsB,GAAG,CAAErB,cAFiD,CAAlD,CAHW,CAArB,CAQAmB,aAAa,CAAGC,MAAM,CAACE,MAAvB,CACAN,aAAa,CAAGI,MAAM,CAACjB,MAAvB,CACD,CAED;AACA;AACA;AACA,GACEoB,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCrB,IAAhC,CAAqCY,aAArC,CAAoD,WAApD,GACA,CAACO,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCrB,IAAhC,CAAqCY,aAArC,CAAoD,YAApD,CAFH,CAGE,CACAA,aAAa,CAAGO,MAAM,CAACG,MAAP,CAAc,EAAd,CAAkBV,aAAlB,CAAiC,CAC/CW,UAAU,CAAEX,aAAa,CAACY,SADqB,CAAjC,CAAhB,CAGA,MAAOZ,CAAAA,aAAa,CAACY,SAArB,CACD,CAED,KAAMC,CAAAA,mBAAmB,CAAGN,MAAM,CAACG,MAAP,CAAc,EAAd,CAAkBV,aAAlB,CAAiC,CAC3DH,QAD2D,CAE3Db,cAAc,CAAEA,cAAc,EAAI8B,SAFyB,CAI3D;AACA;AACAH,UAAU,CACRX,aAAa,CAACW,UAAd,GAA6BG,SAA7B,CACI,KAAKF,SADT,CAEIZ,aAAa,CAACW,UATuC,CAW3D;AACA;AACA;AACAI,cAAc,CAAElB,QAd2C,CAe3DmB,MAAM,CAAE,CACNC,IAAI,CAAE,cADA,CAGN;AACA;AACAC,MAAM,CAAE,KAAKA,MALP,CAON;AACAC,iBAAiB,CAAE,IARb,CASNC,qBAAqB,CAAE,IATjB,CAWN;AACA;AACA;AACAC,qBAAqB,CAAE,IAdjB,CAeN,GAAGrB,aAAa,CAACgB,MAfX,CAfmD,CAAjC,CAA5B,CAiCA;AACA,MAAOH,CAAAA,mBAAmB,CAACS,cAA3B,CACA,MAAOT,CAAAA,mBAAmB,CAACU,eAA3B,CAEA,KAAMC,CAAAA,MAAM,CAAG,oBACbhC,eAAOI,SAAP,CAAiB,iCAAjB,CADa,CAEb,IAAM,CACJ,MAAOlB,CAAAA,KAAK,CAAC+C,iBAAN,CAAwBZ,mBAAxB,CAAP,CACD,CAJY,CAAf,CAOA,GAAIW,MAAJ,CAAY,CACV,GAAIE,CAAAA,OAAO,CAAGF,MAAM,CAACE,OAArB,CACA,GAAI5C,SAAS,EAAIA,SAAS,CAAC0C,MAA3B,CAAmC,CACjCE,OAAO,CAAG,KAAM,yBACdlC,eAAOI,SAAP,CAAiB,yBAAjB,CADc,CAEd,SACE,KAAMd,CAAAA,SAAS,CAAC0C,MAAV,CAAiBpC,IAAjB,CAAsB,IAAtB,CAA4BoC,MAA5B,CAAoC,CACxCzC,MADwC,CAExCsB,GAAG,CAAErB,cAFmC,CAGxCmB,aAHwC,CAApC,CAHM,CAAhB,CASD,CAED,GAAIuB,OAAO,CAACf,UAAR,GAAuB,QAA3B,CAAqC,CACnC;AACA;AACA;AACA;AACA;AACA;AACAe,OAAO,CAACf,UAAR,CAAqB,IAArB,CACD,CAED,KAAM,CAAEW,cAAF,CAAkBC,eAAlB,EAAsCvB,aAA5C,CAEA,GAAII,CAAAA,MAAJ,CACA,GAAIkB,cAAJ,CAAoB,CAClBlB,MAAM,CAAG,KAAM,mBAAM,CACnBrB,MADmB,CAEnB2C,OAFmB,CAGnBJ,cAHmB,CAInBC,eAJmB,CAKnBI,gBAAgB,CAAE,KALC,CAAN,CAAf,CAOD,CARD,IAQO,CACLvB,MAAM,CAAG,KAAM,yBACbZ,eAAOI,SAAP,CAAiB,WAAjB,CAA8B,CAC5BgC,UAAU,CAAE,CACV/B,QADU,CAEVgC,KAAK,CAAE,UAFG,CADgB,CAA9B,CADa,CAOb,SAAY,CACV,MAAO,uBAAU9C,MAAV,CAAkB2C,OAAlB,CAAP,CACD,CATY,CAAf,CAWD,CAED;AACA;AACA,GAAI,MAAOF,CAAAA,MAAM,CAACM,OAAd,GAA0B,QAA9B,CAAwC,CACtC,KAAKC,aAAL,CAAmBP,MAAM,CAACM,OAA1B,EACD,CAED,GAAI1B,MAAJ,CAAY,CACV,KAAM,CAAE4B,IAAF,CAAQ3B,GAAR,EAAgBD,MAAtB,CAEA,MAAO,CAAC4B,IAAD,CAAO3B,GAAP,CAAP,CACD,CACF,CAED;AACA,MAAO,CAACtB,MAAD,CAASC,cAAT,CAAP,CACD,CA7IM,CAAP,CA8ID,CAhJM,CAAP,CAiJD","sourcesContent":["// import babel from 'next/dist/compiled/babel/core'\nimport loaderUtils from 'next/dist/compiled/loader-utils'\nimport { tracer, traceAsyncFn, traceFn } from '../../../../tracer'\nimport cache from './cache'\nimport transform from './transform'\n\n// When using `import` Babel will be undefined\nconst babel = require('next/dist/compiled/babel/core')\n\nexport default function makeLoader(callback) {\n  const overrides = callback(babel)\n\n  return function (source, inputSourceMap) {\n    // Make the loader async\n    const cb = this.async()\n\n    loader.call(this, source, inputSourceMap, overrides).then(\n      (args) => cb(null, ...args),\n      (err) => cb(err)\n    )\n  }\n}\n\nasync function loader(source, inputSourceMap, overrides) {\n  // Provided by profiling-plugin.ts\n  return tracer.withSpan(this.currentTraceSpan, () => {\n    const span = tracer.startSpan('babel-loader')\n    return traceAsyncFn(span, async () => {\n      const filename = this.resourcePath\n      span.setAttribute('filename', filename)\n\n      let loaderOptions = loaderUtils.getOptions(this) || {}\n\n      let customOptions\n      if (overrides && overrides.customOptions) {\n        const result = await traceAsyncFn(\n          tracer.startSpan('loader-overrides-customoptions'),\n          async () =>\n            await overrides.customOptions.call(this, loaderOptions, {\n              source,\n              map: inputSourceMap,\n            })\n        )\n        customOptions = result.custom\n        loaderOptions = result.loader\n      }\n\n      // Standardize on 'sourceMaps' as the key passed through to Webpack, so that\n      // users may safely use either one alongside our default use of\n      // 'this.sourceMap' below without getting error about conflicting aliases.\n      if (\n        Object.prototype.hasOwnProperty.call(loaderOptions, 'sourceMap') &&\n        !Object.prototype.hasOwnProperty.call(loaderOptions, 'sourceMaps')\n      ) {\n        loaderOptions = Object.assign({}, loaderOptions, {\n          sourceMaps: loaderOptions.sourceMap,\n        })\n        delete loaderOptions.sourceMap\n      }\n\n      const programmaticOptions = Object.assign({}, loaderOptions, {\n        filename,\n        inputSourceMap: inputSourceMap || undefined,\n\n        // Set the default sourcemap behavior based on Webpack's mapping flag,\n        // but allow users to override if they want.\n        sourceMaps:\n          loaderOptions.sourceMaps === undefined\n            ? this.sourceMap\n            : loaderOptions.sourceMaps,\n\n        // Ensure that Webpack will get a full absolute path in the sourcemap\n        // so that it can properly map the module back to its internal cached\n        // modules.\n        sourceFileName: filename,\n        caller: {\n          name: 'babel-loader',\n\n          // Provide plugins with insight into webpack target.\n          // https://github.com/babel/babel-loader/issues/787\n          target: this.target,\n\n          // Webpack >= 2 supports ESM and dynamic import.\n          supportsStaticESM: true,\n          supportsDynamicImport: true,\n\n          // Webpack 5 supports TLA behind a flag. We enable it by default\n          // for Babel, and then webpack will throw an error if the experimental\n          // flag isn't enabled.\n          supportsTopLevelAwait: true,\n          ...loaderOptions.caller,\n        },\n      })\n      // Remove loader related options\n      delete programmaticOptions.cacheDirectory\n      delete programmaticOptions.cacheIdentifier\n\n      const config = traceFn(\n        tracer.startSpan('babel-load-partial-config-async'),\n        () => {\n          return babel.loadPartialConfig(programmaticOptions)\n        }\n      )\n\n      if (config) {\n        let options = config.options\n        if (overrides && overrides.config) {\n          options = await traceAsyncFn(\n            tracer.startSpan('loader-overrides-config'),\n            async () =>\n              await overrides.config.call(this, config, {\n                source,\n                map: inputSourceMap,\n                customOptions,\n              })\n          )\n        }\n\n        if (options.sourceMaps === 'inline') {\n          // Babel has this weird behavior where if you set \"inline\", we\n          // inline the sourcemap, and set 'result.map = null'. This results\n          // in bad behavior from Babel since the maps get put into the code,\n          // which Webpack does not expect, and because the map we return to\n          // Webpack is null, which is also bad. To avoid that, we override the\n          // behavior here so \"inline\" just behaves like 'true'.\n          options.sourceMaps = true\n        }\n\n        const { cacheDirectory, cacheIdentifier } = loaderOptions\n\n        let result\n        if (cacheDirectory) {\n          result = await cache({\n            source,\n            options,\n            cacheDirectory,\n            cacheIdentifier,\n            cacheCompression: false,\n          })\n        } else {\n          result = await traceAsyncFn(\n            tracer.startSpan('transform', {\n              attributes: {\n                filename,\n                cache: 'DISABLED',\n              },\n            }),\n            async () => {\n              return transform(source, options)\n            }\n          )\n        }\n\n        // TODO: Babel should really provide the full list of config files that\n        // were used so that this can also handle files loaded with 'extends'.\n        if (typeof config.babelrc === 'string') {\n          this.addDependency(config.babelrc)\n        }\n\n        if (result) {\n          const { code, map } = result\n\n          return [code, map]\n        }\n      }\n\n      // If the file was ignored, pass through the original content.\n      return [source, inputSourceMap]\n    })\n  })\n}\n"]}