{"version":3,"sources":["../../../../build/webpack/loaders/next-plugin-loader.ts"],"names":["pluginLoaderOptions","plugins","nextPluginLoader","middleware","query","substr","filter","plugin","includes","pluginIds","pluginConfigs","map","pluginId","pkgName","push","config","directory","join","id","idx","JSON","stringify"],"mappings":"wFACA,wCACA,6DAMO,KAAMA,CAAAA,mBAEZ,CAAG,CACFC,OAAO,CAAE,EADP,CAFG,C,gDAMP,KAAMC,CAAAA,gBAAuC,CAAG,UAAY,CAC1D,KAAM,CAAEC,UAAF,EACJ,MAAO,MAAKC,KAAZ,GAAsB,QAAtB,CAAiC,uBAAM,KAAKA,KAAL,CAAWC,MAAX,CAAkB,CAAlB,CAAN,CAAjC,CAA+D,KAAKD,KADtE,CAGA,KAAMH,CAAAA,OAAO,CAAGD,mBAAmB,CAACC,OAApB,CAA4BK,MAA5B,CAAoCC,MAAD,EAAY,CAC7D,MAAOA,CAAAA,MAAM,CAACJ,UAAP,CAAkBK,QAAlB,CAA2BL,UAA3B,CAAP,CACD,CAFe,CAAhB,CAIA,KAAMM,CAAAA,SAAmB,CAAG,EAA5B,CACA,KAAMC,CAAAA,aAAoB,CAAG,EAA7B,CAEA,MAAQ;AACV,MAAMT,OAAO,CACNU,GADD,CACMJ,MAAD,EAAY,CACf,KAAMK,CAAAA,QAAQ,CAAG,gCAAYL,MAAM,CAACM,OAAnB,CAAjB,CACAJ,SAAS,CAACK,IAAV,CAAeF,QAAf,EACAF,aAAa,CAACI,IAAd,CAAmBP,MAAM,CAACQ,MAAP,EAAiB,EAApC,EACA,MAAQ,UAASH,QAAS,UAASL,MAAM,CAACS,SAAU,QAAOb,UAAW,GAAtE,CACD,CAND,EAOCc,IAPD,CAOM,IAPN,CAOY;AAClB;AACA;AACA,4BAA4BR,SAAS,CAC5BE,GADmB,CACf,CAACO,EAAD,CAAKC,GAAL,GAAc,GAAED,EAAG,SAAQE,IAAI,CAACC,SAAL,CAAeX,aAAa,CAACS,GAAD,CAA5B,CAAmC,GAD/C,EAEnBF,IAFmB,CAEd,GAFc,CAET;AACnB;AACA,GAfE,CAgBD,CA3BD,C,aA6Bef,gB","sourcesContent":["import { webpack } from 'next/dist/compiled/webpack/webpack'\nimport { parse } from 'querystring'\nimport { PluginMetaData, getPluginId } from '../../plugins/collect-plugins'\n\nexport type NextPluginLoaderQuery = {\n  middleware: string\n}\n\nexport const pluginLoaderOptions: {\n  plugins: PluginMetaData[]\n} = {\n  plugins: [],\n}\n\nconst nextPluginLoader: webpack.loader.Loader = function () {\n  const { middleware }: NextPluginLoaderQuery =\n    typeof this.query === 'string' ? parse(this.query.substr(1)) : this.query\n\n  const plugins = pluginLoaderOptions.plugins.filter((plugin) => {\n    return plugin.middleware.includes(middleware)\n  })\n\n  const pluginIds: string[] = []\n  const pluginConfigs: any[] = []\n\n  return `\n    ${plugins\n      .map((plugin) => {\n        const pluginId = getPluginId(plugin.pkgName)\n        pluginIds.push(pluginId)\n        pluginConfigs.push(plugin.config || {})\n        return `import ${pluginId} from '${plugin.directory}/src/${middleware}'`\n      })\n      .join('\\n')}\n\n    export default function (ctx) {\n      return Promise.all([${pluginIds\n        .map((id, idx) => `${id}(ctx, ${JSON.stringify(pluginConfigs[idx])})`)\n        .join(',')}])\n    }\n  `\n}\n\nexport default nextPluginLoader\n"]}