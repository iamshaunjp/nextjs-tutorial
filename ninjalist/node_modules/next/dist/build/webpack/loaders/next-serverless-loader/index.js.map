{"version":3,"sources":["../../../../../build/webpack/loaders/next-serverless-loader/index.ts"],"names":["nextServerlessLoader","span","tracer","startSpan","distDir","absolutePagePath","page","buildId","canonicalBase","assetPrefix","absoluteAppPath","absoluteDocumentPath","absoluteErrorPath","absolute404Path","generateEtags","poweredByHeader","basePath","runtimeConfig","previewProps","loadedEnvFiles","i18n","query","substr","buildManifest","BUILD_MANIFEST","replace","reactLoadableManifest","REACT_LOADABLE_MANIFEST","routesManifest","ROUTES_MANIFEST","escapedBuildId","pageIsDynamicRoute","encodedPreviewProps","JSON","parse","envLoading","Buffer","from","toString","runtimeConfigImports","runtimeConfigSetter","match","API_ROUTE","undefined"],"mappings":"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","sourcesContent":["import devalue from 'next/dist/compiled/devalue'\nimport escapeRegexp from 'next/dist/compiled/escape-string-regexp'\nimport { join } from 'path'\nimport { parse } from 'querystring'\nimport { webpack } from 'next/dist/compiled/webpack/webpack'\nimport { API_ROUTE } from '../../../../lib/constants'\nimport { isDynamicRoute } from '../../../../next-server/lib/router/utils'\nimport { __ApiPreviewProps } from '../../../../next-server/server/api-utils'\nimport {\n  BUILD_MANIFEST,\n  ROUTES_MANIFEST,\n  REACT_LOADABLE_MANIFEST,\n} from '../../../../next-server/lib/constants'\nimport { tracer, traceFn } from '../../../tracer'\n\nexport type ServerlessLoaderQuery = {\n  page: string\n  distDir: string\n  absolutePagePath: string\n  absoluteAppPath: string\n  absoluteDocumentPath: string\n  absoluteErrorPath: string\n  absolute404Path: string\n  buildId: string\n  assetPrefix: string\n  generateEtags: string\n  poweredByHeader: string\n  canonicalBase: string\n  basePath: string\n  runtimeConfig: string\n  previewProps: string\n  loadedEnvFiles: string\n  i18n: string\n}\n\nconst nextServerlessLoader: webpack.loader.Loader = function () {\n  const span = tracer.startSpan('next-serverless-loader')\n  return traceFn(span, () => {\n    const {\n      distDir,\n      absolutePagePath,\n      page,\n      buildId,\n      canonicalBase,\n      assetPrefix,\n      absoluteAppPath,\n      absoluteDocumentPath,\n      absoluteErrorPath,\n      absolute404Path,\n      generateEtags,\n      poweredByHeader,\n      basePath,\n      runtimeConfig,\n      previewProps,\n      loadedEnvFiles,\n      i18n,\n    }: ServerlessLoaderQuery =\n      typeof this.query === 'string' ? parse(this.query.substr(1)) : this.query\n\n    const buildManifest = join(distDir, BUILD_MANIFEST).replace(/\\\\/g, '/')\n    const reactLoadableManifest = join(\n      distDir,\n      REACT_LOADABLE_MANIFEST\n    ).replace(/\\\\/g, '/')\n    const routesManifest = join(distDir, ROUTES_MANIFEST).replace(/\\\\/g, '/')\n\n    const escapedBuildId = escapeRegexp(buildId)\n    const pageIsDynamicRoute = isDynamicRoute(page)\n\n    const encodedPreviewProps = devalue(\n      JSON.parse(previewProps) as __ApiPreviewProps\n    )\n\n    const envLoading = `\n      const { processEnv } = require('@next/env')\n      processEnv(${Buffer.from(loadedEnvFiles, 'base64').toString()})\n    `\n\n    const runtimeConfigImports = runtimeConfig\n      ? `\n        const { setConfig } = require('next/config')\n      `\n      : ''\n\n    const runtimeConfigSetter = runtimeConfig\n      ? `\n        const runtimeConfig = ${runtimeConfig}\n        setConfig(runtimeConfig)\n      `\n      : 'const runtimeConfig = {}'\n\n    if (page.match(API_ROUTE)) {\n      return `\n        ${envLoading}\n        ${runtimeConfigImports}\n        ${\n          /*\n            this needs to be called first so its available for any other imports\n          */\n          runtimeConfigSetter\n        }\n        import initServer from 'next-plugin-loader?middleware=on-init-server!'\n        import onError from 'next-plugin-loader?middleware=on-error-server!'\n        import 'next/dist/next-server/server/node-polyfill-fetch'\n        import routesManifest from '${routesManifest}'\n  \n        import { getApiHandler } from 'next/dist/build/webpack/loaders/next-serverless-loader/api-handler'\n  \n        const apiHandler = getApiHandler({\n          pageModule: require(\"${absolutePagePath}\"),\n          rewrites: routesManifest.rewrites,\n          i18n: ${i18n || 'undefined'},\n          page: \"${page}\",\n          basePath: \"${basePath}\",\n          pageIsDynamic: ${pageIsDynamicRoute},\n          encodedPreviewProps: ${encodedPreviewProps},\n          experimental: {\n            onError,\n            initServer,\n          }\n        })\n        export default apiHandler\n      `\n    } else {\n      return `\n      import initServer from 'next-plugin-loader?middleware=on-init-server!'\n      import onError from 'next-plugin-loader?middleware=on-error-server!'\n      import 'next/dist/next-server/server/node-polyfill-fetch'\n      import routesManifest from '${routesManifest}'\n      import buildManifest from '${buildManifest}'\n      import reactLoadableManifest from '${reactLoadableManifest}'\n  \n      ${envLoading}\n      ${runtimeConfigImports}\n      ${\n        // this needs to be called first so its available for any other imports\n        runtimeConfigSetter\n      }\n      import { getPageHandler } from 'next/dist/build/webpack/loaders/next-serverless-loader/page-handler'\n  \n      const appMod = require('${absoluteAppPath}')\n      let App = appMod.default || appMod.then && appMod.then(mod => mod.default);\n  \n      const compMod = require('${absolutePagePath}')\n  \n      const Component = compMod.default || compMod.then && compMod.then(mod => mod.default)\n      export default Component\n      export const getStaticProps = compMod['getStaticProp' + 's'] || compMod.then && compMod.then(mod => mod['getStaticProp' + 's'])\n      export const getStaticPaths = compMod['getStaticPath' + 's'] || compMod.then && compMod.then(mod => mod['getStaticPath' + 's'])\n      export const getServerSideProps = compMod['getServerSideProp' + 's'] || compMod.then && compMod.then(mod => mod['getServerSideProp' + 's'])\n  \n      // kept for detecting legacy exports\n      export const unstable_getStaticParams = compMod['unstable_getStaticParam' + 's'] || compMod.then && compMod.then(mod => mod['unstable_getStaticParam' + 's'])\n      export const unstable_getStaticProps = compMod['unstable_getStaticProp' + 's'] || compMod.then && compMod.then(mod => mod['unstable_getStaticProp' + 's'])\n      export const unstable_getStaticPaths = compMod['unstable_getStaticPath' + 's'] || compMod.then && compMod.then(mod => mod['unstable_getStaticPath' + 's'])\n      export const unstable_getServerProps = compMod['unstable_getServerProp' + 's'] || compMod.then && compMod.then(mod => mod['unstable_getServerProp' + 's'])\n  \n      export let config = compMod['confi' + 'g'] || (compMod.then && compMod.then(mod => mod['confi' + 'g'])) || {}\n      export const _app = App\n  \n      const { renderReqToHTML, render } = getPageHandler({\n        pageModule: compMod,\n        pageComponent: Component,\n        pageConfig: config,\n        appModule: App,\n        documentModule: require(\"${absoluteDocumentPath}\"),\n        errorModule: require(\"${absoluteErrorPath}\"),\n        notFoundModule: ${\n          absolute404Path ? `require(\"${absolute404Path}\")` : undefined\n        },\n        pageGetStaticProps: getStaticProps,\n        pageGetStaticPaths: getStaticPaths,\n        pageGetServerSideProps: getServerSideProps,\n  \n        assetPrefix: \"${assetPrefix}\",\n        canonicalBase: \"${canonicalBase}\",\n        generateEtags: ${generateEtags || 'false'},\n        poweredByHeader: ${poweredByHeader || 'false'},\n  \n        runtimeConfig,\n        buildManifest,\n        reactLoadableManifest,\n  \n        rewrites: routesManifest.rewrites,\n        i18n: ${i18n || 'undefined'},\n        page: \"${page}\",\n        buildId: \"${buildId}\",\n        escapedBuildId: \"${escapedBuildId}\",\n        basePath: \"${basePath}\",\n        pageIsDynamic: ${pageIsDynamicRoute},\n        encodedPreviewProps: ${encodedPreviewProps},\n        experimental: {\n          onError,\n          initServer,\n        }\n      })\n      export { renderReqToHTML, render }\n    `\n    }\n  })\n}\n\nexport default nextServerlessLoader\n"]}