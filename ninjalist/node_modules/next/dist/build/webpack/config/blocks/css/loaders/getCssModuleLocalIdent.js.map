{"version":3,"sources":["../../../../../../../build/webpack/config/blocks/css/loaders/getCssModuleLocalIdent.ts"],"names":["regexLikeIndexModule","getCssModuleLocalIdent","context","_","exportName","options","relativePath","path","relative","rootContext","resourcePath","replace","fileNameOrFolder","test","hash","loaderUtils","getHashDigest","Buffer","from","interpolateName"],"mappings":"2FAAA,oFACA,kD,mFAGA,KAAMA,CAAAA,oBAAoB,CAAG,gDAA7B,CAEO,QAASC,CAAAA,sBAAT,CACLC,OADK,CAELC,CAFK,CAGLC,UAHK,CAILC,OAJK,CAKL,CACA,KAAMC,CAAAA,YAAY,CAAGC,cAClBC,QADkB,CACTN,OAAO,CAACO,WADC,CACYP,OAAO,CAACQ,YADpB,EAElBC,OAFkB,CAEV,MAFU,CAEF,GAFE,CAArB,CAIA;AACA;AACA,KAAMC,CAAAA,gBAAgB,CAAGZ,oBAAoB,CAACa,IAArB,CAA0BP,YAA1B,EACrB,UADqB,CAErB,QAFJ,CAIA;AACA,KAAMQ,CAAAA,IAAI,CAAGC,qBAAYC,aAAZ,CACXC,MAAM,CAACC,IAAP,CAAa,YAAWZ,YAAa,cAAaF,UAAW,EAA7D,CADW,CAEX,KAFW,CAGX,QAHW,CAIX,CAJW,CAAb,CAOA;AACA,MACEW,sBACGI,eADH,CAEIjB,OAFJ,CAGIU,gBAAgB,CAAG,GAAnB,CAAyBR,UAAzB,CAAsC,IAAtC,CAA6CU,IAHjD,CAIIT,OAJJ,EAMGM,OANH,CAOI;AACA;AACA;AACA,WAVJ,CAWI,GAXJ,CAaE;AACA;AAdF,CAeGA,OAfH,CAeW,iBAfX,CAe8B,GAf9B,CAgBE;AACA;AAjBF,CAkBGA,OAlBH,CAkBW,cAlBX,CAkB2B,MAlB3B,CADF,CAqBD","sourcesContent":["import loaderUtils from 'next/dist/compiled/loader-utils'\nimport path from 'path'\nimport { webpack } from 'next/dist/compiled/webpack/webpack'\n\nconst regexLikeIndexModule = /(?<!pages[\\\\/])index\\.module\\.(scss|sass|css)$/\n\nexport function getCssModuleLocalIdent(\n  context: webpack.loader.LoaderContext,\n  _: any,\n  exportName: string,\n  options: object\n) {\n  const relativePath = path\n    .relative(context.rootContext, context.resourcePath)\n    .replace(/\\\\+/g, '/')\n\n  // Generate a more meaningful name (parent folder) when the user names the\n  // file `index.module.css`.\n  const fileNameOrFolder = regexLikeIndexModule.test(relativePath)\n    ? '[folder]'\n    : '[name]'\n\n  // Generate a hash to make the class name unique.\n  const hash = loaderUtils.getHashDigest(\n    Buffer.from(`filePath:${relativePath}#className:${exportName}`),\n    'md5',\n    'base64',\n    5\n  )\n\n  // Have webpack interpolate the `[folder]` or `[name]` to its real value.\n  return (\n    loaderUtils\n      .interpolateName(\n        context,\n        fileNameOrFolder + '_' + exportName + '__' + hash,\n        options\n      )\n      .replace(\n        // Webpack name interpolation returns `about.module_root__2oFM9` for\n        // `.root {}` inside a file named `about.module.css`. Let's simplify\n        // this.\n        /\\.module_/,\n        '_'\n      )\n      // Replace invalid symbols with underscores instead of escaping\n      // https://mathiasbynens.be/notes/css-escapes#identifiers-strings\n      .replace(/[^a-zA-Z0-9-_]/g, '_')\n      // \"they cannot start with a digit, two hyphens, or a hyphen followed by a digit [sic]\"\n      // https://www.w3.org/TR/CSS21/syndata.html#characters\n      .replace(/^(\\d|--|-\\d)/, '__$1')\n  )\n}\n"]}