{"version":3,"sources":["../../../../../../../build/webpack/config/blocks/css/loaders/global.ts"],"names":["getGlobalCssLoader","ctx","postCssPlugins","preProcessors","loaders","isClient","push","isDevelopment","assetPrefix","loader","require","resolve","options","importLoaders","length","sourceMap","modules","url","cssFileResolve","import","_","resourcePath","postcssOptions","plugins","config","slice","reverse"],"mappings":"mFAGA,gCACA,2CAEO,QAASA,CAAAA,kBAAT,CACLC,GADK,CAELC,cAFK,CAGLC,aAAgD,CAAG,EAH9C,CAIqB,CAC1B,KAAMC,CAAAA,OAAiC,CAAG,EAA1C,CAEA,GAAIH,GAAG,CAACI,QAAR,CAAkB,CAChB;AACA;AACAD,OAAO,CAACE,IAAR,CACE,iCAAqB,CACnBC,aAAa,CAAEN,GAAG,CAACM,aADA,CAEnBC,WAAW,CAAEP,GAAG,CAACO,WAFE,CAArB,CADF,EAMD,CAED;AACAJ,OAAO,CAACE,IAAR,CAAa,CACXG,MAAM,CAAEC,OAAO,CAACC,OAAR,CAAgB,+BAAhB,CADG,CAEXC,OAAO,CAAE,CACPC,aAAa,CAAE,EAAIV,aAAa,CAACW,MAD1B,CAEPC,SAAS,CAAE,IAFJ,CAGP;AACAC,OAAO,CAAE,KAJF,CAKPC,GAAG,CAAEC,2BALE,CAMPC,MAAM,CAAE,CAACF,GAAD,CAAcG,CAAd,CAAsBC,YAAtB,GACN,gCAAeJ,GAAf,CAAoBI,YAApB,CAPK,CAFE,CAAb,EAaA;AACAjB,OAAO,CAACE,IAAR,CAAa,CACXG,MAAM,CAAEC,OAAO,CAACC,OAAR,CAAgB,mCAAhB,CADG,CAEXC,OAAO,CAAE,CACPU,cAAc,CAAE,CAAEC,OAAO,CAAErB,cAAX,CAA2BsB,MAAM,CAAE,KAAnC,CADT,CAEPT,SAAS,CAAE,IAFJ,CAFE,CAAb,EAQAX,OAAO,CAACE,IAAR,CACE;AACA;AACA,GAAGH,aAAa,CAACsB,KAAd,GAAsBC,OAAtB,EAHL,EAMA,MAAOtB,CAAAA,OAAP,CACD","sourcesContent":["import { AcceptedPlugin } from 'postcss'\nimport { webpack } from 'next/dist/compiled/webpack/webpack'\nimport { ConfigurationContext } from '../../../utils'\nimport { getClientStyleLoader } from './client'\nimport { cssFileResolve } from './file-resolve'\n\nexport function getGlobalCssLoader(\n  ctx: ConfigurationContext,\n  postCssPlugins: readonly AcceptedPlugin[],\n  preProcessors: readonly webpack.RuleSetUseItem[] = []\n): webpack.RuleSetUseItem[] {\n  const loaders: webpack.RuleSetUseItem[] = []\n\n  if (ctx.isClient) {\n    // Add appropriate development more or production mode style\n    // loader\n    loaders.push(\n      getClientStyleLoader({\n        isDevelopment: ctx.isDevelopment,\n        assetPrefix: ctx.assetPrefix,\n      })\n    )\n  }\n\n  // Resolve CSS `@import`s and `url()`s\n  loaders.push({\n    loader: require.resolve('next/dist/compiled/css-loader'),\n    options: {\n      importLoaders: 1 + preProcessors.length,\n      sourceMap: true,\n      // Next.js controls CSS Modules eligibility:\n      modules: false,\n      url: cssFileResolve,\n      import: (url: string, _: any, resourcePath: string) =>\n        cssFileResolve(url, resourcePath),\n    },\n  })\n\n  // Compile CSS\n  loaders.push({\n    loader: require.resolve('next/dist/compiled/postcss-loader'),\n    options: {\n      postcssOptions: { plugins: postCssPlugins, config: false },\n      sourceMap: true,\n    },\n  })\n\n  loaders.push(\n    // Webpack loaders run like a stack, so we need to reverse the natural\n    // order of preprocessors.\n    ...preProcessors.slice().reverse()\n  )\n\n  return loaders\n}\n"]}