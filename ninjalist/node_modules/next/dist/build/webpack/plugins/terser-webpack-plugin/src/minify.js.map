{"version":3,"sources":["../../../../../../build/webpack/plugins/terser-webpack-plugin/src/minify.js"],"names":["buildTerserOptions","terserOptions","mangle","sourceMap","undefined","format","beautify","output","minify","options","name","input","inputSourceMap","opts","asObject","result","terser"],"mappings":"2DACA,yE,mFADA;AAGA,QAASA,CAAAA,kBAAT,CAA4BC,aAAa,CAAG,EAA5C,CAAgD,CAC9C,MAAO,CACL,GAAGA,aADE,CAELC,MAAM,CACJD,aAAa,CAACC,MAAd,EAAwB,IAAxB,CACI,IADJ,CAEI,MAAOD,CAAAA,aAAa,CAACC,MAArB,GAAgC,SAAhC,CACAD,aAAa,CAACC,MADd,CAEA,CAAE,GAAGD,aAAa,CAACC,MAAnB,CAPD,CAQL;AACA;AACAC,SAAS,CAAEC,SAVN,CAWL;AACA,IAAIH,aAAa,CAACI,MAAd,CACA,CAAEA,MAAM,CAAE,CAAEC,QAAQ,CAAE,KAAZ,CAAmB,GAAGL,aAAa,CAACI,MAApC,CAAV,CADA,CAEA,CAAEE,MAAM,CAAE,CAAED,QAAQ,CAAE,KAAZ,CAAmB,GAAGL,aAAa,CAACM,MAApC,CAAV,CAFJ,CAZK,CAAP,CAgBD,CAEM,cAAeC,CAAAA,MAAf,CAAsBC,OAAtB,CAA+B,CACpC,KAAM,CAAEC,IAAF,CAAQC,KAAR,CAAeC,cAAf,CAA+BX,aAA/B,EAAiDQ,OAAvD,CACA;AACA,KAAMI,CAAAA,IAAI,CAAGb,kBAAkB,CAACC,aAAD,CAA/B,CAEA;AACA,GAAIW,cAAJ,CAAoB,CAClB;AACAC,IAAI,CAACV,SAAL,CAAiB,CAAEW,QAAQ,CAAE,IAAZ,CAAjB,CACD,CAED,KAAMC,CAAAA,MAAM,CAAG,KAAMC,iBAAOR,MAAP,CAAc,CAAE,CAACE,IAAD,EAAQC,KAAV,CAAd,CAAiCE,IAAjC,CAArB,CACA,MAAOE,CAAAA,MAAP,CACD","sourcesContent":["// @ts-nocheck\nimport terser from 'next/dist/compiled/terser'\n\nfunction buildTerserOptions(terserOptions = {}) {\n  return {\n    ...terserOptions,\n    mangle:\n      terserOptions.mangle == null\n        ? true\n        : typeof terserOptions.mangle === 'boolean'\n        ? terserOptions.mangle\n        : { ...terserOptions.mangle },\n    // Ignoring sourceMap from options\n    // eslint-disable-next-line no-undefined\n    sourceMap: undefined,\n    // the `output` option is deprecated\n    ...(terserOptions.format\n      ? { format: { beautify: false, ...terserOptions.format } }\n      : { output: { beautify: false, ...terserOptions.output } }),\n  }\n}\n\nexport async function minify(options) {\n  const { name, input, inputSourceMap, terserOptions } = options\n  // Copy terser options\n  const opts = buildTerserOptions(terserOptions)\n\n  // Let terser generate a SourceMap\n  if (inputSourceMap) {\n    // @ts-ignore\n    opts.sourceMap = { asObject: true }\n  }\n\n  const result = await terser.minify({ [name]: input }, opts)\n  return result\n}\n"]}