{"version":3,"sources":["../../../../../../build/webpack/plugins/webpack-conformance-plugin/checks/granular-chunks-conformance.ts"],"names":["getWarningMessage","modifiedProp","CONFORMANCE_WARNING_PREFIX","chalk","bold","getErrorMessage","message","CONFORMANCE_ERROR_PREFIX","GranularChunksConformanceCheck","constructor","granularChunksConfig","buildStared","options","userSplitChunks","optimization","splitChunks","warnings","errors","maxInitialRequests","push","minSize","userCacheGroup","cacheGroups","originalCacheGroup","vendors","framework","lib","commons","shared","length","result","IConformanceTestStatus","SUCCESS","failedResult","FAILED","map","warning","error"],"mappings":"mFAAA,oDACA,uCAIA,+CAKA,qC,mFAOA,QAASA,CAAAA,iBAAT,CAA2BC,YAA3B,CAAiD,CAC/C,MACG,GAAEC,qCAA2B,8CAA9B,CACC,+DAA8DC,eAAMC,IAAN,CAC7DH,YAD6D,CAE7D,+DAJJ,CAMD,CAED,QAASI,CAAAA,eAAT,CAAyBC,OAAzB,CAA0C,CACxC,MACG,GAAEC,mCAAyB,8CAA5B,CACC,2EAA0EJ,eAAMC,IAAN,CACzEE,OADyE,CAEzE,EAJJ,CAMD,CAEM,KAAME,CAAAA,8BAA+B,CAC1CC,WAAW,CAACC,oBAAD,CAA4B,CACrC,KAAKA,oBAAL,CAA4BA,oBAA5B,CACD,CAEMC,WAAP,CAAmBC,OAAnB,CAAyD,CACvD,KAAMC,CAAAA,eAAe,CAAGD,OAAO,CAACE,YAAR,CAAqBC,WAA7C,CACA,KAAMC,CAAAA,QAAQ,CAAG,EAAjB,CACA,KAAMC,CAAAA,MAAM,CAAG,EAAf,CAEA,GACEJ,eAAe,CAACK,kBAAhB,GACA,KAAKR,oBAAL,CAA0BQ,kBAF5B,CAGE,CACAF,QAAQ,CAACG,IAAT,CAAc,gCAAd,EACD,CAED,GAAIN,eAAe,CAACO,OAAhB,GAA4B,KAAKV,oBAAL,CAA0BU,OAA1D,CAAmE,CACjEJ,QAAQ,CAACG,IAAT,CAAc,qBAAd,EACD,CAED,KAAME,CAAAA,cAAc,CAAGR,eAAe,CAACS,WAAvC,CACA,KAAMC,CAAAA,kBAAkB,CAAG,KAAKb,oBAAL,CAA0BY,WAArD,CAEA,GAAID,cAAc,CAACG,OAAf,GAA2B,KAA/B,CAAsC,CACpCP,MAAM,CAACE,IAAP,CAAY,iCAAZ,EACD,CAED,GAAI,CAAC,qBAAUE,cAAc,CAACI,SAAzB,CAAoCF,kBAAkB,CAACE,SAAvD,CAAL,CAAwE,CACtER,MAAM,CAACE,IAAP,CAAY,mCAAZ,EACD,CAED,GAAI,CAAC,qBAAUE,cAAc,CAACK,GAAzB,CAA8BH,kBAAkB,CAACG,GAAjD,CAAL,CAA4D,CAC1DT,MAAM,CAACE,IAAP,CAAY,6BAAZ,EACD,CAED,GAAI,CAAC,qBAAUE,cAAc,CAACM,OAAzB,CAAkCJ,kBAAkB,CAACI,OAArD,CAAL,CAAoE,CAClEV,MAAM,CAACE,IAAP,CAAY,iCAAZ,EACD,CAED,GAAI,CAAC,qBAAUE,cAAc,CAACO,MAAzB,CAAiCL,kBAAkB,CAACK,MAApD,CAAL,CAAkE,CAChEX,MAAM,CAACE,IAAP,CAAY,gCAAZ,EACD,CAED,GAAI,CAACH,QAAQ,CAACa,MAAV,EAAoB,CAACZ,MAAM,CAACY,MAAhC,CAAwC,CACtC,MAAO,CACLC,MAAM,CAAEC,sCAAuBC,OAD1B,CAAP,CAGD,CAED,KAAMC,CAAAA,YAAoC,CAAG,CAC3CH,MAAM,CAAEC,sCAAuBG,MADY,CAA7C,CAIA,GAAIlB,QAAQ,CAACa,MAAb,CAAqB,CACnBI,YAAY,CAACjB,QAAb,CAAwBA,QAAQ,CAACmB,GAAT,CAAcC,OAAD,GAAc,CACjD9B,OAAO,CAAEN,iBAAiB,CAACoC,OAAD,CADuB,CAAd,CAAb,CAAxB,CAGD,CAED,GAAInB,MAAM,CAACY,MAAX,CAAmB,CACjBI,YAAY,CAACjB,QAAb,CAAwBC,MAAM,CAACkB,GAAP,CAAYE,KAAD,GAAY,CAC7C/B,OAAO,CAAED,eAAe,CAACgC,KAAD,CADqB,CAAZ,CAAX,CAAxB,CAGD,CAED,MAAOJ,CAAAA,YAAP,CACD,CAnEyC,C","sourcesContent":["import chalk from 'chalk'\nimport {\n  CONFORMANCE_ERROR_PREFIX,\n  CONFORMANCE_WARNING_PREFIX,\n} from '../constants'\nimport {\n  IConformanceTestResult,\n  IConformanceTestStatus,\n  IWebpackConformanceTest,\n} from '../TestInterface'\nimport { deepEqual } from '../utils/utils'\n\nexport interface GranularChunksConformanceCheck\n  extends IWebpackConformanceTest {\n  granularChunksConfig: any\n}\n\nfunction getWarningMessage(modifiedProp: string) {\n  return (\n    `${CONFORMANCE_WARNING_PREFIX}: The splitChunks config has been carefully ` +\n    `crafted to optimize build size and build times. Modifying - ${chalk.bold(\n      modifiedProp\n    )} could result in slower builds and increased code duplication`\n  )\n}\n\nfunction getErrorMessage(message: string) {\n  return (\n    `${CONFORMANCE_ERROR_PREFIX}: The splitChunks config has been carefully ` +\n    `crafted to optimize build size and build times. Please avoid changes to ${chalk.bold(\n      message\n    )}`\n  )\n}\n\nexport class GranularChunksConformanceCheck {\n  constructor(granularChunksConfig: any) {\n    this.granularChunksConfig = granularChunksConfig\n  }\n\n  public buildStared(options: any): IConformanceTestResult {\n    const userSplitChunks = options.optimization.splitChunks\n    const warnings = []\n    const errors = []\n\n    if (\n      userSplitChunks.maxInitialRequests !==\n      this.granularChunksConfig.maxInitialRequests\n    ) {\n      warnings.push('splitChunks.maxInitialRequests')\n    }\n\n    if (userSplitChunks.minSize !== this.granularChunksConfig.minSize) {\n      warnings.push('splitChunks.minSize')\n    }\n\n    const userCacheGroup = userSplitChunks.cacheGroups\n    const originalCacheGroup = this.granularChunksConfig.cacheGroups\n\n    if (userCacheGroup.vendors !== false) {\n      errors.push('splitChunks.cacheGroups.vendors')\n    }\n\n    if (!deepEqual(userCacheGroup.framework, originalCacheGroup.framework)) {\n      errors.push('splitChunks.cacheGroups.framework')\n    }\n\n    if (!deepEqual(userCacheGroup.lib, originalCacheGroup.lib)) {\n      errors.push('splitChunks.cacheGroups.lib')\n    }\n\n    if (!deepEqual(userCacheGroup.commons, originalCacheGroup.commons)) {\n      errors.push('splitChunks.cacheGroups.commons')\n    }\n\n    if (!deepEqual(userCacheGroup.shared, originalCacheGroup.shared)) {\n      errors.push('splitChunks.cacheGroups.shared')\n    }\n\n    if (!warnings.length && !errors.length) {\n      return {\n        result: IConformanceTestStatus.SUCCESS,\n      }\n    }\n\n    const failedResult: IConformanceTestResult = {\n      result: IConformanceTestStatus.FAILED,\n    }\n\n    if (warnings.length) {\n      failedResult.warnings = warnings.map((warning) => ({\n        message: getWarningMessage(warning),\n      }))\n    }\n\n    if (errors.length) {\n      failedResult.warnings = errors.map((error) => ({\n        message: getErrorMessage(error),\n      }))\n    }\n\n    return failedResult\n  }\n}\n"]}