{"version":3,"sources":["../../../../../../build/webpack/plugins/webpack-conformance-plugin/checks/duplicate-polyfills-conformance-check.ts"],"names":["getMessage","property","request","isWarning","CONFORMANCE_WARNING_PREFIX","CONFORMANCE_ERROR_PREFIX","BANNED_LEFT_OBJECT_TYPES","DuplicatePolyfillsConformanceCheck","constructor","options","BlockedAPIs","BlockedAPIToBePolyfilled","getAstNode","EARLY_EXIT_SUCCESS_RESULT","result","IConformanceTestStatus","SUCCESS","visitor","inspectNode","path","node","left","type","includes","object","name","isNodeThisOrSelf","FAILED","warnings","message","objectName","allBindings","scope","lookup","sourcePath","bindings","originPath","parentPath","originNode","init","firstInStatement","e","arguments","length","propsNode","properties","props","foundBannedPolyfill","doesScriptLoadBannedAPIfromPolyfillIO","src","source","blockedAPIs","url","URL","hostname","searchParams","has","requestedAPIs","get","split","find","api"],"mappings":"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","sourcesContent":["// eslint-disable-next-line import/no-extraneous-dependencies\nimport { namedTypes } from 'ast-types'\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport { NodePath } from 'ast-types/lib/node-path'\nimport { types } from 'next/dist/compiled/recast'\nimport {\n  CONFORMANCE_ERROR_PREFIX,\n  CONFORMANCE_WARNING_PREFIX,\n} from '../constants'\nimport {\n  IConformanceTestResult,\n  IConformanceTestStatus,\n  IGetAstNodeResult,\n  IParsedModuleDetails,\n  IWebpackConformanceTest,\n} from '../TestInterface'\nimport {\n  isNodeCreatingScriptElement,\n  reducePropsToObject,\n} from '../utils/ast-utils'\nimport { getLocalFileName } from '../utils/file-utils'\n\nfunction getMessage(\n  property: string,\n  request: string,\n  isWarning: Boolean = false\n): string {\n  if (isWarning) {\n    return `${CONFORMANCE_WARNING_PREFIX}: Found a ${property} polyfill in ${getLocalFileName(\n      request\n    )}.`\n  }\n  return `${CONFORMANCE_ERROR_PREFIX}: Found a ${property} polyfill in ${getLocalFileName(\n    request\n  )}.`\n}\n\nexport interface DuplicatePolyfillsConformanceTestSettings {\n  BlockedAPIToBePolyfilled?: string[]\n}\n\nconst BANNED_LEFT_OBJECT_TYPES = ['Identifier', 'ThisExpression']\n\nexport class DuplicatePolyfillsConformanceCheck\n  implements IWebpackConformanceTest {\n  private BlockedAPIs: string[] = []\n  constructor(options: DuplicatePolyfillsConformanceTestSettings = {}) {\n    this.BlockedAPIs = options.BlockedAPIToBePolyfilled || []\n  }\n  public getAstNode(): IGetAstNodeResult[] {\n    const EARLY_EXIT_SUCCESS_RESULT: IConformanceTestResult = {\n      result: IConformanceTestStatus.SUCCESS,\n    }\n    return [\n      {\n        visitor: 'visitAssignmentExpression',\n        inspectNode: (\n          path: NodePath<namedTypes.AssignmentExpression>,\n          { request }: IParsedModuleDetails\n        ): IConformanceTestResult => {\n          const { node } = path\n          const left = node.left as namedTypes.MemberExpression\n          /**\n           * We're only interested in code like `foo.fetch = bar;`.\n           * For anything else we exit with a success.\n           * Also foo in foo.bar needs to be either Identifier or `this` and not someFunction().fetch;\n           */\n          if (\n            left.type !== 'MemberExpression' ||\n            !BANNED_LEFT_OBJECT_TYPES.includes(left.object.type) ||\n            left.property.type !== 'Identifier'\n          ) {\n            return EARLY_EXIT_SUCCESS_RESULT\n          }\n          if (!this.BlockedAPIs.includes(left.property.name)) {\n            return EARLY_EXIT_SUCCESS_RESULT\n          }\n          /**\n           * Here we know the code is `foo.(fetch/URL) = something.\n           * If foo === this/self, fail it immediately.\n           * check for this.[fetch|URL(...BlockedAPIs)]/ self.[fetch|URL(...BlockedAPIs)]\n           **/\n          if (isNodeThisOrSelf(left.object)) {\n            return {\n              result: IConformanceTestStatus.FAILED,\n              warnings: [\n                {\n                  message: getMessage(left.property.name, request),\n                },\n              ],\n            }\n          }\n          /**\n           * we now are sure the code under examination is\n           * `globalVar.[fetch|URL(...BlockedAPIs)] = something`\n           **/\n          const objectName = (left.object as namedTypes.Identifier).name\n          const allBindings = path.scope.lookup(objectName)\n          if (!allBindings) {\n            /**\n             * we have absolutely no idea where globalVar came from,\n             * so lets just exit\n             **/\n            return EARLY_EXIT_SUCCESS_RESULT\n          }\n\n          try {\n            const sourcePath = allBindings.bindings[objectName][0]\n            const originPath = sourcePath.parentPath\n            const {\n              node: originNode,\n            }: { node: namedTypes.VariableDeclarator } = originPath\n            if (\n              originNode.type === 'VariableDeclarator' &&\n              isNodeThisOrSelf(originNode.init)\n            ) {\n              return {\n                result: IConformanceTestStatus.FAILED,\n                warnings: [\n                  {\n                    message: getMessage(left.property.name, request),\n                  },\n                ],\n              }\n            }\n            if (\n              originPath.name === 'params' &&\n              originPath.parentPath.firstInStatement()\n            ) {\n              /**\n               * We do not know what will be the value of this param at runtime so we just throw a warning.\n               * ```\n               * (function(scope){\n               *  ....\n               *  scope.fetch = new Fetch();\n               * })(.....)\n               * ```\n               */\n              return {\n                result: IConformanceTestStatus.FAILED,\n                warnings: [\n                  {\n                    message: getMessage(left.property.name, request, true),\n                  },\n                ],\n              }\n            }\n          } catch (e) {\n            return EARLY_EXIT_SUCCESS_RESULT\n          }\n\n          return EARLY_EXIT_SUCCESS_RESULT\n        },\n      },\n      {\n        visitor: 'visitCallExpression',\n        inspectNode: (path: NodePath) => {\n          const { node }: { node: types.namedTypes.CallExpression } = path\n          if (!node.arguments || node.arguments.length < 2) {\n            return EARLY_EXIT_SUCCESS_RESULT\n          }\n          if (isNodeCreatingScriptElement(node)) {\n            const propsNode = node\n              .arguments[1] as types.namedTypes.ObjectExpression\n            if (!propsNode.properties) {\n              return EARLY_EXIT_SUCCESS_RESULT\n            }\n            const props: {\n              [key: string]: string\n            } = reducePropsToObject(propsNode)\n            if (!('src' in props)) {\n              return EARLY_EXIT_SUCCESS_RESULT\n            }\n            const foundBannedPolyfill = doesScriptLoadBannedAPIfromPolyfillIO(\n              props.src,\n              this.BlockedAPIs\n            )\n            if (foundBannedPolyfill) {\n              return {\n                result: IConformanceTestStatus.FAILED,\n                warnings: [\n                  {\n                    message: `${CONFORMANCE_WARNING_PREFIX}: Found polyfill.io loading polyfill for ${foundBannedPolyfill}.`,\n                  },\n                ],\n              }\n            }\n          }\n          return EARLY_EXIT_SUCCESS_RESULT\n        },\n      },\n    ]\n  }\n}\n\nfunction isNodeThisOrSelf(node: any): boolean {\n  return (\n    node.type === 'ThisExpression' ||\n    (node.type === 'Identifier' && node.name === 'self')\n  )\n}\n\nfunction doesScriptLoadBannedAPIfromPolyfillIO(\n  source: string,\n  blockedAPIs: string[]\n): string | undefined {\n  const url = new URL(source)\n  if (url.hostname === 'polyfill.io' && url.searchParams.has('features')) {\n    const requestedAPIs = (url.searchParams.get('features') || '').split(',')\n    return blockedAPIs.find((api) => requestedAPIs.includes(api))\n  }\n}\n"]}