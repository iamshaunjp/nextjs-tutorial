{"version":3,"sources":["../../../build/plugins/collect-plugins.ts"],"names":["version","require","VALID_MIDDLEWARE","exitWithError","error","console","process","exit","collectPluginMeta","env","pluginPackagePath","pluginName","requiredVersion","pkgDir","path","dirname","pluginPackageJson","pluginMetaData","nextjs","name","middleware","promises","readdir","join","withFileTypes","filter","dirent","isFile","map","file","err","code","item","parts","split","pop","invalidMiddleware","includes","push","length","Array","isArray","missingEnvFields","field","directory","replace","requiredEnv","pkgName","getPluginId","pkg","match","_collectPlugins","dir","pluginsConfig","nextPluginNames","skippedPluginNames","hasPluginConfig","nextPluginConfigNames","config","rootPackageJsonPath","cwd","log","rootPackageJson","dependencies","concat","Object","keys","devDependencies","filteredDeps","dep","nextPluginMetaData","Promise","all","resolve","paths","plugin","curPlugin","find","collectPlugins"],"mappings":"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","sourcesContent":["import findUp from 'next/dist/compiled/find-up'\nimport { promises } from 'fs'\nimport path from 'path'\nimport { execOnce } from '../../next-server/lib/utils'\n\nconst { version } = require('next/package.json')\n\nexport type PluginMetaData = {\n  requiredEnv: string[]\n  middleware: string[]\n  pluginName: string\n  directory: string\n  pkgName: string\n  version: string\n  config?: { [name: string]: any }\n}\n\n// currently supported middleware\nexport const VALID_MIDDLEWARE = [\n  'document-head-tags-server',\n  'on-init-client',\n  'on-init-server',\n  'on-error-client',\n  'on-error-server',\n  'babel-preset-build',\n]\n\ntype ENV_OPTIONS = { [name: string]: string }\n\nconst exitWithError = (error: string) => {\n  console.error(error)\n  process.exit(1)\n}\n\nasync function collectPluginMeta(\n  env: ENV_OPTIONS,\n  pluginPackagePath: string,\n  pluginName: string,\n  requiredVersion: string\n): Promise<PluginMetaData> {\n  const pkgDir = path.dirname(pluginPackagePath)\n  const pluginPackageJson = require(pluginPackagePath)\n  const pluginMetaData: {\n    name: string\n    'required-env': string[]\n  } = pluginPackageJson.nextjs\n\n  if (pluginPackageJson.version !== requiredVersion) {\n    exitWithError(\n      `Next.js plugin versions must match the Next.js version being used, received ${pluginName}@${pluginPackageJson.version} need ${requiredVersion}`\n    )\n  }\n\n  if (!pluginMetaData) {\n    exitWithError(\n      `Next.js plugins need to have a \"nextjs\" key in package.json for ${pluginName}`\n    )\n  }\n\n  if (!pluginMetaData.name) {\n    exitWithError(\n      `Next.js plugins need to have a \"nextjs.name\" key in package.json for ${pluginName}`\n    )\n  }\n\n  // TODO: add err.sh explaining requirements\n  let middleware: string[] = []\n  try {\n    middleware = (\n      await promises.readdir(path.join(pkgDir, 'src'), { withFileTypes: true })\n    )\n      .filter((dirent) => dirent.isFile())\n      .map((file) => file.name)\n  } catch (err) {\n    if (err.code !== 'ENOENT') {\n      console.error(err)\n    }\n    exitWithError(\n      `Failed to read src/ directory for Next.js plugin: ${pluginName}`\n    )\n  }\n\n  // remove the extension from the middleware\n  middleware = middleware.map((item) => {\n    const parts = item.split('.')\n    parts.pop()\n    return parts.join('.')\n  })\n\n  const invalidMiddleware: string[] = []\n\n  for (const item of middleware) {\n    if (!VALID_MIDDLEWARE.includes(item)) {\n      invalidMiddleware.push(item)\n    }\n  }\n\n  if (invalidMiddleware.length > 0) {\n    console.error(\n      `Next.js Plugin: ${pluginName} listed invalid middleware ${invalidMiddleware.join(\n        ', '\n      )}`\n    )\n  }\n\n  // TODO: investigate requiring plugins' env be prefixed\n  // somehow to prevent collision\n  if (!Array.isArray(pluginMetaData['required-env'])) {\n    exitWithError(\n      'Next.js plugins need to have a \"nextjs.required-env\" key in package.json'\n    )\n  }\n\n  const missingEnvFields: string[] = []\n\n  for (const field of pluginMetaData['required-env']) {\n    if (typeof env[field] === 'undefined') {\n      missingEnvFields.push(field)\n    }\n  }\n\n  if (missingEnvFields.length > 0) {\n    exitWithError(\n      `Next.js Plugin: ${pluginName} required env ${missingEnvFields.join(\n        ', '\n      )} but was missing in your \\`next.config.js\\``\n    )\n  }\n\n  return {\n    middleware,\n    directory: pkgDir.replace(/\\\\/g, '/'),\n    requiredEnv: pluginMetaData['required-env'],\n    version: pluginPackageJson.version,\n    pluginName: pluginMetaData.name,\n    pkgName: pluginPackageJson.name,\n  }\n}\n\n// clean package name so it can be used as variable\nexport const getPluginId = (pkg: string): string => {\n  pkg = pkg.replace(/\\W/g, '')\n\n  if (pkg.match(/^[0-9]/)) {\n    pkg = `_${pkg}`\n  }\n  return pkg\n}\n\ntype PluginConfig =\n  | string\n  | {\n      name: string\n      config: { [name: string]: any }\n    }\n\nasync function _collectPlugins(\n  dir: string,\n  env: ENV_OPTIONS,\n  pluginsConfig: PluginConfig[] | undefined\n): Promise<PluginMetaData[]> {\n  let nextPluginNames: string[] = []\n  const skippedPluginNames: string[] = []\n  const hasPluginConfig = Array.isArray(pluginsConfig)\n\n  const nextPluginConfigNames = hasPluginConfig\n    ? pluginsConfig!.map((config) =>\n        typeof config === 'string' ? config : config.name\n      )\n    : null\n\n  const rootPackageJsonPath = await findUp('package.json', { cwd: dir })\n  if (!rootPackageJsonPath && !nextPluginConfigNames) {\n    console.log('Failed to load plugins, no package.json')\n    return []\n  }\n\n  if (rootPackageJsonPath) {\n    const rootPackageJson = require(rootPackageJsonPath)\n    let dependencies: string[] = []\n    if (rootPackageJson.dependencies) {\n      dependencies = dependencies.concat(\n        Object.keys(rootPackageJson.dependencies)\n      )\n    }\n\n    if (rootPackageJson.devDependencies) {\n      dependencies = dependencies.concat(\n        Object.keys(rootPackageJson.devDependencies)\n      )\n    }\n\n    // find packages with the naming convention\n    // @next/plugin-[name]\n    const filteredDeps = dependencies.filter((name) => {\n      return name.match(/^@next\\/plugin/)\n    })\n\n    if (nextPluginConfigNames) {\n      for (const dep of filteredDeps) {\n        if (!nextPluginConfigNames.includes(dep)) {\n          skippedPluginNames.push(dep)\n        }\n      }\n      nextPluginNames = nextPluginConfigNames\n    } else {\n      nextPluginNames = filteredDeps\n    }\n  }\n\n  const nextPluginMetaData = await Promise.all(\n    nextPluginNames.map((name) =>\n      collectPluginMeta(\n        env,\n        require.resolve(path.join(name, 'package.json'), { paths: [dir] }),\n        name,\n        version\n      )\n    )\n  )\n\n  for (const plugin of nextPluginMetaData) {\n    // Add plugin config from `next.config.js`\n    if (hasPluginConfig) {\n      const curPlugin = pluginsConfig!.find(\n        (config) =>\n          config && typeof config === 'object' && config.name === plugin.pkgName\n      )\n      if (curPlugin && typeof curPlugin === 'object') {\n        plugin.config = curPlugin.config\n      }\n    }\n    console.log(\n      `Loaded plugin: ${plugin.pkgName}${\n        plugin.version ? `@${plugin.version}` : ''\n      }`\n    )\n  }\n\n  if (skippedPluginNames.length) {\n    console.log(\n      `Plugins config used skipped loading: ${skippedPluginNames.join(', ')}`\n    )\n  }\n  console.log()\n\n  return nextPluginMetaData\n}\n\n// only execute it once between server/client configs\n// since the plugins need to match\nexport const collectPlugins = execOnce(_collectPlugins)\n"]}