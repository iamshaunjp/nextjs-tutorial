{"version":3,"sources":["../../build/generate-build-id.ts"],"names":["generateBuildId","generate","fallback","buildId","test","Error","trim"],"mappings":"6EAAO,cAAeA,CAAAA,eAAf,CACLC,QADK,CAELC,QAFK,CAGY,CACjB,GAAIC,CAAAA,OAAO,CAAG,KAAMF,CAAAA,QAAQ,EAA5B,CACA;AACA,GAAIE,OAAO,GAAK,IAAhB,CAAsB,CACpB;AACA;AACA,MAAO,CAACA,OAAD,EAAY,MAAMC,IAAN,CAAWD,OAAX,CAAnB,CAAwC,CACtCA,OAAO,CAAGD,QAAQ,EAAlB,CACD,CACF,CAED,GAAI,MAAOC,CAAAA,OAAP,GAAmB,QAAvB,CAAiC,CAC/B,KAAM,IAAIE,CAAAA,KAAJ,CACJ,qGADI,CAAN,CAGD,CAED,MAAOF,CAAAA,OAAO,CAACG,IAAR,EAAP,CACD","sourcesContent":["export async function generateBuildId(\n  generate: () => string | null,\n  fallback: () => string\n): Promise<string> {\n  let buildId = await generate()\n  // If there's no buildId defined we'll fall back\n  if (buildId === null) {\n    // We also create a new buildId if it contains the word `ad` to avoid false\n    // positives with ad blockers\n    while (!buildId || /ad/i.test(buildId)) {\n      buildId = fallback()\n    }\n  }\n\n  if (typeof buildId !== 'string') {\n    throw new Error(\n      'generateBuildId did not return a string. https://err.sh/vercel/next.js/generatebuildid-not-a-string'\n    )\n  }\n\n  return buildId.trim()\n}\n"]}