#!/usr/bin/env node
"use strict";var log=_interopRequireWildcard(require("../build/output/log"));var _index=_interopRequireDefault(require("next/dist/compiled/arg/index.js"));var _constants=require("../lib/constants");var _api=_interopRequireDefault(require("@opentelemetry/api"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj};}function _getRequireWildcardCache(){if(typeof WeakMap!=="function")return null;var cache=new WeakMap();_getRequireWildcardCache=function(){return cache;};return cache;}function _interopRequireWildcard(obj){if(obj&&obj.__esModule){return obj;}if(obj===null||typeof obj!=="object"&&typeof obj!=="function"){return{default:obj};}var cache=_getRequireWildcardCache();if(cache&&cache.has(obj)){return cache.get(obj);}var newObj={};var hasPropertyDescriptor=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var key in obj){if(Object.prototype.hasOwnProperty.call(obj,key)){var desc=hasPropertyDescriptor?Object.getOwnPropertyDescriptor(obj,key):null;if(desc&&(desc.get||desc.set)){Object.defineProperty(newObj,key,desc);}else{newObj[key]=obj[key];}}}newObj.default=obj;if(cache){cache.set(obj,newObj);}return newObj;}['react','react-dom'].forEach(dependency=>{try{// When 'npm link' is used it checks the clone location. Not the project.
require.resolve(dependency);}catch(err){console.warn(`The module '${dependency}' was not found. Next.js requires that you include it in 'dependencies' of your 'package.json'. To add it, run 'npm install ${dependency}'`);}});const defaultCommand='dev';const commands={build:async()=>await Promise.resolve().then(()=>_interopRequireWildcard(require('../cli/next-build'))).then(i=>i.nextBuild),start:async()=>await Promise.resolve().then(()=>_interopRequireWildcard(require('../cli/next-start'))).then(i=>i.nextStart),export:async()=>await Promise.resolve().then(()=>_interopRequireWildcard(require('../cli/next-export'))).then(i=>i.nextExport),dev:async()=>await Promise.resolve().then(()=>_interopRequireWildcard(require('../cli/next-dev'))).then(i=>i.nextDev),telemetry:async()=>await Promise.resolve().then(()=>_interopRequireWildcard(require('../cli/next-telemetry'))).then(i=>i.nextTelemetry)};const args=(0,_index.default)({// Types
'--version':Boolean,'--help':Boolean,'--inspect':Boolean,// Aliases
'-v':'--version','-h':'--help'},{permissive:true});// Version is inlined into the file using taskr build pipeline
if(args['--version']){console.log(`Next.js v${"10.0.7"}`);process.exit(0);}// Check if we are running `next <subcommand>` or `next`
const foundCommand=Boolean(commands[args._[0]]);// Makes sure the `next --help` case is covered
// This help message is only showed for `next --help`
// `next <subcommand> --help` falls through to be handled later
if(!foundCommand&&args['--help']){console.log(`
    Usage
      $ next <command>

    Available commands
      ${Object.keys(commands).join(', ')}

    Options
      --version, -v   Version number
      --help, -h      Displays this message

    For more information run a command with the --help flag
      $ next build --help
  `);process.exit(0);}const command=foundCommand?args._[0]:defaultCommand;const forwardedArgs=foundCommand?args._.slice(1):args._;if(args['--inspect'])throw new Error(`--inspect flag is deprecated. Use env variable NODE_OPTIONS instead: NODE_OPTIONS='--inspect' next ${command}`);// Make sure the `next <subcommand> --help` case is covered
if(args['--help']){forwardedArgs.push('--help');}const defaultEnv=command==='dev'?'development':'production';const standardEnv=['production','development','test'];if(process.env.NODE_ENV&&!standardEnv.includes(process.env.NODE_ENV)){log.warn(_constants.NON_STANDARD_NODE_ENV);};process.env.NODE_ENV=process.env.NODE_ENV||defaultEnv;// this needs to come after we set the correct NODE_ENV or
// else it might cause SSR to break
const React=require('react');if(typeof React.Suspense==='undefined'){throw new Error(`The version of React you are using is lower than the minimum required version needed for Next.js. Please upgrade "react" and "react-dom": "npm install react react-dom" https://err.sh/vercel/next.js/invalid-react-version`);}// Make sure commands gracefully respect termination signals (e.g. from Docker)
process.on('SIGTERM',()=>process.exit(0));process.on('SIGINT',()=>process.exit(0));commands[command]().then(exec=>exec(forwardedArgs)).then(async()=>{if(command==='build'){// @ts-ignore getDelegate exists
const tp=_api.default.trace.getTracerProvider().getDelegate();if(tp.shutdown){await tp.shutdown();}process.exit(0);}});if(command==='dev'){const{CONFIG_FILE}=require('../next-server/lib/constants');const{watchFile}=require('fs');watchFile(`${process.cwd()}/${CONFIG_FILE}`,(cur,prev)=>{if(cur.size>0||prev.size>0){console.log(`\n> Found a change in ${CONFIG_FILE}. Restart the server to see the changes in effect.`);}});}
//# sourceMappingURL=next.map