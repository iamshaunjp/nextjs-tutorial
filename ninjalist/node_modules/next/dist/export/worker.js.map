{"version":3,"sources":["../../export/worker.ts"],"names":["envConfig","require","global","__NEXT_DATA__","nextExport","exportPage","spanContext","path","pathMap","distDir","outDir","pagesDataDir","renderOpts","buildExport","serverRuntimeConfig","subFolders","serverless","optimizeFonts","optimizeImages","optimizeCss","opentelemetryApi","context","with","propagation","extract","active","tracer","startSpan","results","ampValidations","query","originalQuery","page","filePath","isDynamic","ampPath","renderAmpPath","params","updatedPath","__nextSsgPath","locale","__nextLocale","localePathResult","locales","detectedLocale","pathname","defaultLocale","hasOrigQueryValues","Object","keys","length","queryWithAutoExportWarn","Error","undefined","headerMocks","headers","getHeader","setHeader","hasHeader","removeHeader","getHeaderNames","req","url","res","setConfig","publicRuntimeConfig","runtimeConfig","htmlFilename","sep","pageExt","pathExt","baseDir","htmlFilepath","promises","mkdir","recursive","html","curRenderOpts","renderMethod","renderToHTML","renderedDuringBuild","getStaticProps","curUrl","parse","format","Component","mod","getServerSideProps","SERVER_PROPS_EXPORT_ERROR","endsWith","renderReqToHTML","result","fontManifest","isNotFound","components","process","env","__NEXT_OPTIMIZE_FONTS","JSON","stringify","__NEXT_OPTIMIZE_IMAGES","__NEXT_OPTIMIZE_CSS","ssgNotFound","validateAmp","rawAmpHtml","ampPageName","validatorPath","validator","AmpHtmlValidator","getInstance","validateString","errors","filter","e","severity","warnings","push","inAmpMode","ampSkipValidation","ampValidatorPath","hybridAmp","ampHtmlFilename","ampBaseDir","ampHtmlFilepath","access","_","ampHtml","includes","amp","writeFile","pageData","dataFile","replace","fromBuildExportRevalidate","revalidate","error","console","stack"],"mappings":"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","sourcesContent":["import url from 'url'\nimport { extname, join, dirname, sep } from 'path'\nimport { renderToHTML } from '../next-server/server/render'\nimport { promises } from 'fs'\nimport AmpHtmlValidator from 'next/dist/compiled/amphtml-validator'\nimport { loadComponents } from '../next-server/server/load-components'\nimport { isDynamicRoute } from '../next-server/lib/router/utils/is-dynamic'\nimport { getRouteMatcher } from '../next-server/lib/router/utils/route-matcher'\nimport { getRouteRegex } from '../next-server/lib/router/utils/route-regex'\nimport { normalizePagePath } from '../next-server/server/normalize-page-path'\nimport { SERVER_PROPS_EXPORT_ERROR } from '../lib/constants'\nimport 'next/dist/next-server/server/node-polyfill-fetch'\nimport { IncomingMessage, ServerResponse } from 'http'\nimport { ComponentType } from 'react'\nimport { GetStaticProps } from '../types'\nimport { requireFontManifest } from '../next-server/server/require'\nimport { FontManifest } from '../next-server/server/font-utils'\nimport { normalizeLocalePath } from '../next-server/lib/i18n/normalize-locale-path'\nimport { tracer, traceAsyncFn } from '../build/tracer'\nimport opentelemetryApi from '@opentelemetry/api'\n\nconst envConfig = require('../next-server/lib/runtime-config')\n\n;(global as any).__NEXT_DATA__ = {\n  nextExport: true,\n}\n\ninterface AmpValidation {\n  page: string\n  result: {\n    errors: AmpHtmlValidator.ValidationError[]\n    warnings: AmpHtmlValidator.ValidationError[]\n  }\n}\n\ninterface PathMap {\n  page: string\n  query?: { [key: string]: string | string[] }\n}\n\ninterface ExportPageInput {\n  path: string\n  pathMap: PathMap\n  distDir: string\n  outDir: string\n  pagesDataDir: string\n  renderOpts: RenderOpts\n  buildExport?: boolean\n  serverRuntimeConfig: string\n  subFolders?: boolean\n  serverless: boolean\n  optimizeFonts: boolean\n  optimizeImages: boolean\n  optimizeCss: any\n  spanContext: any\n}\n\ninterface ExportPageResults {\n  ampValidations: AmpValidation[]\n  fromBuildExportRevalidate?: number\n  error?: boolean\n  ssgNotFound?: boolean\n}\n\ninterface RenderOpts {\n  runtimeConfig?: { [key: string]: any }\n  params?: { [key: string]: string | string[] }\n  ampPath?: string\n  ampValidatorPath?: string\n  ampSkipValidation?: boolean\n  hybridAmp?: boolean\n  inAmpMode?: boolean\n  optimizeFonts?: boolean\n  optimizeImages?: boolean\n  optimizeCss?: any\n  fontManifest?: FontManifest\n  locales?: string[]\n  locale?: string\n  defaultLocale?: string\n}\n\ntype ComponentModule = ComponentType<{}> & {\n  renderReqToHTML: typeof renderToHTML\n  getStaticProps?: GetStaticProps\n}\n\nexport default async function exportPage({\n  spanContext,\n  path,\n  pathMap,\n  distDir,\n  outDir,\n  pagesDataDir,\n  renderOpts,\n  buildExport,\n  serverRuntimeConfig,\n  subFolders,\n  serverless,\n  optimizeFonts,\n  optimizeImages,\n  optimizeCss,\n}: ExportPageInput): Promise<ExportPageResults> {\n  return opentelemetryApi.context.with(\n    opentelemetryApi.propagation.extract(\n      opentelemetryApi.context.active(),\n      spanContext\n    ),\n    () => {\n      return traceAsyncFn(tracer.startSpan('export-page-worker'), async () => {\n        let results: ExportPageResults = {\n          ampValidations: [],\n        }\n\n        try {\n          const { query: originalQuery = {} } = pathMap\n          const { page } = pathMap\n          const filePath = normalizePagePath(path)\n          const isDynamic = isDynamicRoute(page)\n          const ampPath = `${filePath}.amp`\n          let renderAmpPath = ampPath\n          let query = { ...originalQuery }\n          let params: { [key: string]: string | string[] } | undefined\n\n          let updatedPath = (query.__nextSsgPath as string) || path\n          let locale = query.__nextLocale || renderOpts.locale\n          delete query.__nextLocale\n          delete query.__nextSsgPath\n\n          if (renderOpts.locale) {\n            const localePathResult = normalizeLocalePath(\n              path,\n              renderOpts.locales\n            )\n\n            if (localePathResult.detectedLocale) {\n              updatedPath = localePathResult.pathname\n              locale = localePathResult.detectedLocale\n\n              if (locale === renderOpts.defaultLocale) {\n                renderAmpPath = `${normalizePagePath(updatedPath)}.amp`\n              }\n            }\n          }\n\n          // We need to show a warning if they try to provide query values\n          // for an auto-exported page since they won't be available\n          const hasOrigQueryValues = Object.keys(originalQuery).length > 0\n          const queryWithAutoExportWarn = () => {\n            if (hasOrigQueryValues) {\n              throw new Error(\n                `\\nError: you provided query values for ${path} which is an auto-exported page. These can not be applied since the page can no longer be re-rendered on the server. To disable auto-export for this page add \\`getInitialProps\\`\\n`\n              )\n            }\n          }\n\n          // Check if the page is a specified dynamic route\n          if (isDynamic && page !== path) {\n            params =\n              getRouteMatcher(getRouteRegex(page))(updatedPath) || undefined\n            if (params) {\n              // we have to pass these separately for serverless\n              if (!serverless) {\n                query = {\n                  ...query,\n                  ...params,\n                }\n              }\n            } else {\n              throw new Error(\n                `The provided export path '${updatedPath}' doesn't match the '${page}' page.\\nRead more: https://err.sh/vercel/next.js/export-path-mismatch`\n              )\n            }\n          }\n\n          const headerMocks = {\n            headers: {},\n            getHeader: () => ({}),\n            setHeader: () => {},\n            hasHeader: () => false,\n            removeHeader: () => {},\n            getHeaderNames: () => [],\n          }\n\n          const req = ({\n            url: updatedPath,\n            ...headerMocks,\n          } as unknown) as IncomingMessage\n          const res = ({\n            ...headerMocks,\n          } as unknown) as ServerResponse\n\n          envConfig.setConfig({\n            serverRuntimeConfig,\n            publicRuntimeConfig: renderOpts.runtimeConfig,\n          })\n\n          let htmlFilename = `${filePath}${sep}index.html`\n          if (!subFolders) htmlFilename = `${filePath}.html`\n\n          const pageExt = extname(page)\n          const pathExt = extname(path)\n          // Make sure page isn't a folder with a dot in the name e.g. `v1.2`\n          if (pageExt !== pathExt && pathExt !== '') {\n            // If the path has an extension, use that as the filename instead\n            htmlFilename = path\n          } else if (path === '/') {\n            // If the path is the root, just use index.html\n            htmlFilename = 'index.html'\n          }\n\n          const baseDir = join(outDir, dirname(htmlFilename))\n          let htmlFilepath = join(outDir, htmlFilename)\n\n          await promises.mkdir(baseDir, { recursive: true })\n          let html\n          let curRenderOpts: RenderOpts = {}\n          let renderMethod = renderToHTML\n\n          const renderedDuringBuild = (getStaticProps: any) => {\n            return !buildExport && getStaticProps && !isDynamicRoute(path)\n          }\n\n          if (serverless) {\n            const curUrl = url.parse(req.url!, true)\n            req.url = url.format({\n              ...curUrl,\n              query: {\n                ...curUrl.query,\n                ...query,\n              },\n            })\n            const { Component: mod, getServerSideProps } = await loadComponents(\n              distDir,\n              page,\n              serverless\n            )\n\n            if (getServerSideProps) {\n              throw new Error(\n                `Error for page ${page}: ${SERVER_PROPS_EXPORT_ERROR}`\n              )\n            }\n\n            // if it was auto-exported the HTML is loaded here\n            if (typeof mod === 'string') {\n              html = mod\n              queryWithAutoExportWarn()\n            } else {\n              // for non-dynamic SSG pages we should have already\n              // prerendered the file\n              if (renderedDuringBuild((mod as ComponentModule).getStaticProps))\n                return results\n\n              if (\n                (mod as ComponentModule).getStaticProps &&\n                !htmlFilepath.endsWith('.html')\n              ) {\n                // make sure it ends with .html if the name contains a dot\n                htmlFilename += '.html'\n                htmlFilepath += '.html'\n              }\n\n              renderMethod = (mod as ComponentModule).renderReqToHTML\n              const result = await renderMethod(\n                req,\n                res,\n                'export',\n                {\n                  ampPath: renderAmpPath,\n                  /// @ts-ignore\n                  optimizeFonts,\n                  /// @ts-ignore\n                  optimizeImages,\n                  /// @ts-ignore\n                  optimizeCss,\n                  distDir,\n                  fontManifest: optimizeFonts\n                    ? requireFontManifest(distDir, serverless)\n                    : null,\n                  locale: locale!,\n                  locales: renderOpts.locales!,\n                },\n                // @ts-ignore\n                params\n              )\n              curRenderOpts = (result as any).renderOpts || {}\n              html = (result as any).html\n            }\n\n            if (!html && !(curRenderOpts as any).isNotFound) {\n              throw new Error(`Failed to render serverless page`)\n            }\n          } else {\n            const components = await loadComponents(distDir, page, serverless)\n\n            if (components.getServerSideProps) {\n              throw new Error(\n                `Error for page ${page}: ${SERVER_PROPS_EXPORT_ERROR}`\n              )\n            }\n\n            // for non-dynamic SSG pages we should have already\n            // prerendered the file\n            if (renderedDuringBuild(components.getStaticProps)) {\n              return results\n            }\n\n            // TODO: de-dupe the logic here between serverless and server mode\n            if (components.getStaticProps && !htmlFilepath.endsWith('.html')) {\n              // make sure it ends with .html if the name contains a dot\n              htmlFilepath += '.html'\n              htmlFilename += '.html'\n            }\n\n            if (typeof components.Component === 'string') {\n              html = components.Component\n              queryWithAutoExportWarn()\n            } else {\n              /**\n               * This sets environment variable to be used at the time of static export by head.tsx.\n               * Using this from process.env allows targeting both serverless and SSR by calling\n               * `process.env.__NEXT_OPTIMIZE_FONTS`.\n               * TODO(prateekbh@): Remove this when experimental.optimizeFonts are being cleaned up.\n               */\n              if (optimizeFonts) {\n                process.env.__NEXT_OPTIMIZE_FONTS = JSON.stringify(true)\n              }\n              if (optimizeImages) {\n                process.env.__NEXT_OPTIMIZE_IMAGES = JSON.stringify(true)\n              }\n              if (optimizeCss) {\n                process.env.__NEXT_OPTIMIZE_CSS = JSON.stringify(true)\n              }\n              curRenderOpts = {\n                ...components,\n                ...renderOpts,\n                ampPath: renderAmpPath,\n                params,\n                optimizeFonts,\n                optimizeImages,\n                optimizeCss,\n                fontManifest: optimizeFonts\n                  ? requireFontManifest(distDir, serverless)\n                  : null,\n                locale: locale as string,\n              }\n              // @ts-ignore\n              html = await renderMethod(req, res, page, query, curRenderOpts)\n            }\n          }\n          results.ssgNotFound = (curRenderOpts as any).isNotFound\n\n          const validateAmp = async (\n            rawAmpHtml: string,\n            ampPageName: string,\n            validatorPath?: string\n          ) => {\n            const validator = await AmpHtmlValidator.getInstance(validatorPath)\n            const result = validator.validateString(rawAmpHtml)\n            const errors = result.errors.filter((e) => e.severity === 'ERROR')\n            const warnings = result.errors.filter((e) => e.severity !== 'ERROR')\n\n            if (warnings.length || errors.length) {\n              results.ampValidations.push({\n                page: ampPageName,\n                result: {\n                  errors,\n                  warnings,\n                },\n              })\n            }\n          }\n\n          if (curRenderOpts.inAmpMode && !curRenderOpts.ampSkipValidation) {\n            if (!results.ssgNotFound) {\n              await validateAmp(html, path, curRenderOpts.ampValidatorPath)\n            }\n          } else if (curRenderOpts.hybridAmp) {\n            // we need to render the AMP version\n            let ampHtmlFilename = `${ampPath}${sep}index.html`\n            if (!subFolders) {\n              ampHtmlFilename = `${ampPath}.html`\n            }\n            const ampBaseDir = join(outDir, dirname(ampHtmlFilename))\n            const ampHtmlFilepath = join(outDir, ampHtmlFilename)\n\n            try {\n              await promises.access(ampHtmlFilepath)\n            } catch (_) {\n              // make sure it doesn't exist from manual mapping\n              let ampHtml\n              if (serverless) {\n                req.url += (req.url!.includes('?') ? '&' : '?') + 'amp=1'\n                // @ts-ignore\n                ampHtml = (\n                  await (renderMethod as any)(\n                    req,\n                    res,\n                    'export',\n                    curRenderOpts,\n                    params\n                  )\n                ).html\n              } else {\n                ampHtml = await renderMethod(\n                  req,\n                  res,\n                  page,\n                  // @ts-ignore\n                  { ...query, amp: '1' },\n                  curRenderOpts as any\n                )\n              }\n\n              if (!curRenderOpts.ampSkipValidation) {\n                await validateAmp(ampHtml, page + '?amp=1')\n              }\n              await promises.mkdir(ampBaseDir, { recursive: true })\n              await promises.writeFile(ampHtmlFilepath, ampHtml, 'utf8')\n            }\n          }\n\n          if ((curRenderOpts as any).pageData) {\n            const dataFile = join(\n              pagesDataDir,\n              htmlFilename.replace(/\\.html$/, '.json')\n            )\n\n            await promises.mkdir(dirname(dataFile), { recursive: true })\n            await promises.writeFile(\n              dataFile,\n              JSON.stringify((curRenderOpts as any).pageData),\n              'utf8'\n            )\n\n            if (curRenderOpts.hybridAmp) {\n              await promises.writeFile(\n                dataFile.replace(/\\.json$/, '.amp.json'),\n                JSON.stringify((curRenderOpts as any).pageData),\n                'utf8'\n              )\n            }\n          }\n          results.fromBuildExportRevalidate = (curRenderOpts as any).revalidate\n\n          if (results.ssgNotFound) {\n            // don't attempt writing to disk if getStaticProps returned not found\n            return results\n          }\n          await promises.writeFile(htmlFilepath, html, 'utf8')\n          return results\n        } catch (error) {\n          console.error(\n            `\\nError occurred prerendering page \"${path}\". Read more: https://err.sh/next.js/prerender-error\\n` +\n              error.stack\n          )\n          return { ...results, error: true }\n        }\n      })\n    }\n  )\n}\n"]}