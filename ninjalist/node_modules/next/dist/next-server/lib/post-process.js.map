{"version":3,"sources":["../../../next-server/lib/post-process.ts"],"names":["MAXIMUM_IMAGE_PRELOADS","IMAGE_PRELOAD_SIZE_THRESHOLD","middlewareRegistry","registerPostProcessor","name","middleware","condition","push","processHTML","html","data","options","postProcessData","preloads","images","root","document","callMiddleWare","inspect","mutate","i","length","FontOptimizerMiddleware","fontDefinitions","markup","_data","result","getFontDefinition","key","url","nonce","fallBackLinkTag","indexOf","fontContent","replace","nonceStr","originalDom","querySelectorAll","filter","tag","getAttribute","hasAttribute","OPTIMIZED_FONT_PROVIDERS","some","dataHref","startsWith","forEach","element","ImageOptimizerMiddleware","imagePreloadTags","imgHref","preloadTagAlreadyExists","reduce","acc","imgElements","eligibleImages","isImgEligible","imgEl","src","imgElement","imgSrc","sourceIsSupportedType","imageIsNotTooSmall","imageIsNotHidden","href","regex","RegExp","match","heightAttr","widthAttr","parseInt","err","activeElement","parentNode","includes","optimizeFonts","process","env","__NEXT_OPTIMIZE_FONTS","optimizeImages","__NEXT_OPTIMIZE_IMAGES"],"mappings":"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","sourcesContent":["import { parse, HTMLElement } from 'node-html-parser'\nimport { OPTIMIZED_FONT_PROVIDERS } from './constants'\n\n// const MIDDLEWARE_TIME_BUDGET = parseInt(process.env.__POST_PROCESS_MIDDLEWARE_TIME_BUDGET || '', 10) || 10\nconst MAXIMUM_IMAGE_PRELOADS = 2\nconst IMAGE_PRELOAD_SIZE_THRESHOLD = 2500\n\ntype postProcessOptions = {\n  optimizeFonts: boolean\n  optimizeImages: boolean\n}\n\ntype renderOptions = {\n  getFontDefinition?: (url: string) => string\n}\n\ntype postProcessData = {\n  preloads: {\n    images: Array<string>\n  }\n}\n\ninterface PostProcessMiddleware {\n  inspect: (\n    originalDom: HTMLElement,\n    data: postProcessData,\n    options: renderOptions\n  ) => void\n  mutate: (\n    markup: string,\n    data: postProcessData,\n    options: renderOptions\n  ) => Promise<string>\n}\n\ntype middlewareSignature = {\n  name: string\n  middleware: PostProcessMiddleware\n  condition: ((options: postProcessOptions) => boolean) | null\n}\n\nconst middlewareRegistry: Array<middlewareSignature> = []\n\nfunction registerPostProcessor(\n  name: string,\n  middleware: PostProcessMiddleware,\n  condition?: (options: postProcessOptions) => boolean\n) {\n  middlewareRegistry.push({ name, middleware, condition: condition || null })\n}\n\nasync function processHTML(\n  html: string,\n  data: renderOptions,\n  options: postProcessOptions\n): Promise<string> {\n  // Don't parse unless there's at least one processor middleware\n  if (!middlewareRegistry[0]) {\n    return html\n  }\n  const postProcessData: postProcessData = {\n    preloads: {\n      images: [],\n    },\n  }\n  const root: HTMLElement = parse(html)\n  let document = html\n  // Calls the middleware, with some instrumentation and logging\n  async function callMiddleWare(middleware: PostProcessMiddleware) {\n    // let timer = Date.now()\n    middleware.inspect(root, postProcessData, data)\n    document = await middleware.mutate(document, postProcessData, data)\n    // timer = Date.now() - timer\n    // if (timer > MIDDLEWARE_TIME_BUDGET) {\n    // TODO: Identify a correct upper limit for the postprocess step\n    // and add a warning to disable the optimization\n    // }\n    return\n  }\n\n  for (let i = 0; i < middlewareRegistry.length; i++) {\n    let middleware = middlewareRegistry[i]\n    if (!middleware.condition || middleware.condition(options)) {\n      await callMiddleWare(middlewareRegistry[i].middleware)\n    }\n  }\n\n  return document\n}\n\nclass FontOptimizerMiddleware implements PostProcessMiddleware {\n  fontDefinitions: (string | undefined)[][] = []\n  inspect(\n    originalDom: HTMLElement,\n    _data: postProcessData,\n    options: renderOptions\n  ) {\n    if (!options.getFontDefinition) {\n      return\n    }\n    // collecting all the requested font definitions\n    originalDom\n      .querySelectorAll('link')\n      .filter(\n        (tag: HTMLElement) =>\n          tag.getAttribute('rel') === 'stylesheet' &&\n          tag.hasAttribute('data-href') &&\n          OPTIMIZED_FONT_PROVIDERS.some((url) => {\n            const dataHref = tag.getAttribute('data-href')\n            return dataHref ? dataHref.startsWith(url) : false\n          })\n      )\n      .forEach((element: HTMLElement) => {\n        const url = element.getAttribute('data-href')\n        const nonce = element.getAttribute('nonce')\n\n        if (url) {\n          this.fontDefinitions.push([url, nonce])\n        }\n      })\n  }\n  mutate = async (\n    markup: string,\n    _data: postProcessData,\n    options: renderOptions\n  ) => {\n    let result = markup\n    if (!options.getFontDefinition) {\n      return markup\n    }\n    for (const key in this.fontDefinitions) {\n      const [url, nonce] = this.fontDefinitions[key]\n      const fallBackLinkTag = `<link rel=\"stylesheet\" href=\"${url}\"/>`\n      if (\n        result.indexOf(`<style data-href=\"${url}\">`) > -1 ||\n        result.indexOf(fallBackLinkTag) > -1\n      ) {\n        // The font is already optimized and probably the response is cached\n        continue\n      }\n      const fontContent = options.getFontDefinition(url as string)\n      if (!fontContent) {\n        /**\n         * In case of unreachable font definitions, fallback to default link tag.\n         */\n        result = result.replace('</head>', `${fallBackLinkTag}</head>`)\n      } else {\n        const nonceStr = nonce ? ` nonce=\"${nonce}\"` : ''\n        result = result.replace(\n          '</head>',\n          `<style data-href=\"${url}\"${nonceStr}>${fontContent}</style></head>`\n        )\n      }\n    }\n    return result\n  }\n}\n\nclass ImageOptimizerMiddleware implements PostProcessMiddleware {\n  inspect(originalDom: HTMLElement, _data: postProcessData) {\n    const imgElements = originalDom.querySelectorAll('img')\n    let eligibleImages: Array<HTMLElement> = []\n    for (let i = 0; i < imgElements.length; i++) {\n      if (isImgEligible(imgElements[i])) {\n        eligibleImages.push(imgElements[i])\n      }\n      if (eligibleImages.length >= MAXIMUM_IMAGE_PRELOADS) {\n        break\n      }\n    }\n\n    _data.preloads.images = []\n\n    for (const imgEl of eligibleImages) {\n      const src = imgEl.getAttribute('src')\n      if (src) {\n        _data.preloads.images.push(src)\n      }\n    }\n  }\n  mutate = async (markup: string, _data: postProcessData) => {\n    let result = markup\n    let imagePreloadTags = _data.preloads.images\n      .filter((imgHref) => !preloadTagAlreadyExists(markup, imgHref))\n      .reduce(\n        (acc, imgHref) =>\n          acc + `<link rel=\"preload\" href=\"${imgHref}\" as=\"image\"/>`,\n        ''\n      )\n    return result.replace(\n      /<link rel=\"preload\"/,\n      `${imagePreloadTags}<link rel=\"preload\"`\n    )\n  }\n}\n\nfunction isImgEligible(imgElement: HTMLElement): boolean {\n  let imgSrc = imgElement.getAttribute('src')\n  return (\n    !!imgSrc &&\n    sourceIsSupportedType(imgSrc) &&\n    imageIsNotTooSmall(imgElement) &&\n    imageIsNotHidden(imgElement)\n  )\n}\n\nfunction preloadTagAlreadyExists(html: string, href: string) {\n  const regex = new RegExp(`<link[^>]*href[^>]*${href}`)\n  return html.match(regex)\n}\n\nfunction imageIsNotTooSmall(imgElement: HTMLElement): boolean {\n  // Skip images without both height and width--we don't know enough to say if\n  // they are too small\n  if (\n    !(imgElement.hasAttribute('height') && imgElement.hasAttribute('width'))\n  ) {\n    return true\n  }\n  try {\n    const heightAttr = imgElement.getAttribute('height')\n    const widthAttr = imgElement.getAttribute('width')\n    if (!heightAttr || !widthAttr) {\n      return true\n    }\n\n    if (\n      parseInt(heightAttr) * parseInt(widthAttr) <=\n      IMAGE_PRELOAD_SIZE_THRESHOLD\n    ) {\n      return false\n    }\n  } catch (err) {\n    return true\n  }\n  return true\n}\n\n// Traverse up the dom from each image to see if it or any of it's\n// ancestors have the hidden attribute.\nfunction imageIsNotHidden(imgElement: HTMLElement): boolean {\n  let activeElement = imgElement\n  while (activeElement.parentNode) {\n    if (activeElement.hasAttribute('hidden')) {\n      return false\n    }\n    activeElement = activeElement.parentNode as HTMLElement\n  }\n  return true\n}\n\n// Currently only filters out svg images--could be made more specific in the future.\nfunction sourceIsSupportedType(imgSrc: string): boolean {\n  return !imgSrc.includes('.svg')\n}\n\n// Initialization\nregisterPostProcessor(\n  'Inline-Fonts',\n  new FontOptimizerMiddleware(),\n  // Using process.env because passing Experimental flag through loader is not possible.\n  // @ts-ignore\n  (options) => options.optimizeFonts || process.env.__NEXT_OPTIMIZE_FONTS\n)\n\nregisterPostProcessor(\n  'Preload Images',\n  new ImageOptimizerMiddleware(),\n  // @ts-ignore\n  (options) => options.optimizeImages || process.env.__NEXT_OPTIMIZE_IMAGES\n)\n\nexport default processHTML\n"]}