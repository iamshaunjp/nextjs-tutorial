{"version":3,"sources":["../../../../../next-server/lib/router/utils/format-url.ts"],"names":["slashedProtocols","formatUrl","urlObj","auth","hostname","protocol","pathname","hash","query","host","encodeURIComponent","replace","indexOf","port","String","querystring","urlQueryToSearchParams","search","substr","slashes","test"],"mappings":"iEAwBA,kE,qzBAxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA,KAAMA,CAAAA,gBAAgB,CAAG,wBAAzB,CAEO,QAASC,CAAAA,SAAT,CAAmBC,MAAnB,CAAsC,CAC3C,GAAI,CAAEC,IAAF,CAAQC,QAAR,EAAqBF,MAAzB,CACA,GAAIG,CAAAA,QAAQ,CAAGH,MAAM,CAACG,QAAP,EAAmB,EAAlC,CACA,GAAIC,CAAAA,QAAQ,CAAGJ,MAAM,CAACI,QAAP,EAAmB,EAAlC,CACA,GAAIC,CAAAA,IAAI,CAAGL,MAAM,CAACK,IAAP,EAAe,EAA1B,CACA,GAAIC,CAAAA,KAAK,CAAGN,MAAM,CAACM,KAAP,EAAgB,EAA5B,CACA,GAAIC,CAAAA,IAAoB,CAAG,KAA3B,CAEAN,IAAI,CAAGA,IAAI,CAAGO,kBAAkB,CAACP,IAAD,CAAlB,CAAyBQ,OAAzB,CAAiC,MAAjC,CAAyC,GAAzC,EAAgD,GAAnD,CAAyD,EAApE,CAEA,GAAIT,MAAM,CAACO,IAAX,CAAiB,CACfA,IAAI,CAAGN,IAAI,CAAGD,MAAM,CAACO,IAArB,CACD,CAFD,IAEO,IAAIL,QAAJ,CAAc,CACnBK,IAAI,CAAGN,IAAI,EAAI,CAACC,QAAQ,CAACQ,OAAT,CAAiB,GAAjB,CAAD,CAA0B,IAAGR,QAAS,GAAtC,CAA2CA,QAA/C,CAAX,CACA,GAAIF,MAAM,CAACW,IAAX,CAAiB,CACfJ,IAAI,EAAI,IAAMP,MAAM,CAACW,IAArB,CACD,CACF,CAED,GAAIL,KAAK,EAAI,MAAOA,CAAAA,KAAP,GAAiB,QAA9B,CAAwC,CACtCA,KAAK,CAAGM,MAAM,CAACC,WAAW,CAACC,sBAAZ,CAAmCR,KAAnC,CAAD,CAAd,CACD,CAED,GAAIS,CAAAA,MAAM,CAAGf,MAAM,CAACe,MAAP,EAAkBT,KAAK,EAAK,IAAGA,KAAM,EAArC,EAA2C,EAAxD,CAEA,GAAIH,QAAQ,EAAIA,QAAQ,CAACa,MAAT,CAAgB,CAAC,CAAjB,IAAwB,GAAxC,CAA6Cb,QAAQ,EAAI,GAAZ,CAE7C,GACEH,MAAM,CAACiB,OAAP,EACC,CAAC,CAACd,QAAD,EAAaL,gBAAgB,CAACoB,IAAjB,CAAsBf,QAAtB,CAAd,GAAkDI,IAAI,GAAK,KAF9D,CAGE,CACAA,IAAI,CAAG,MAAQA,IAAI,EAAI,EAAhB,CAAP,CACA,GAAIH,QAAQ,EAAIA,QAAQ,CAAC,CAAD,CAAR,GAAgB,GAAhC,CAAqCA,QAAQ,CAAG,IAAMA,QAAjB,CACtC,CAND,IAMO,IAAI,CAACG,IAAL,CAAW,CAChBA,IAAI,CAAG,EAAP,CACD,CAED,GAAIF,IAAI,EAAIA,IAAI,CAAC,CAAD,CAAJ,GAAY,GAAxB,CAA6BA,IAAI,CAAG,IAAMA,IAAb,CAC7B,GAAIU,MAAM,EAAIA,MAAM,CAAC,CAAD,CAAN,GAAc,GAA5B,CAAiCA,MAAM,CAAG,IAAMA,MAAf,CAEjCX,QAAQ,CAAGA,QAAQ,CAACK,OAAT,CAAiB,OAAjB,CAA0BD,kBAA1B,CAAX,CACAO,MAAM,CAAGA,MAAM,CAACN,OAAP,CAAe,GAAf,CAAoB,KAApB,CAAT,CAEA,MAAQ,GAAEN,QAAS,GAAEI,IAAK,GAAEH,QAAS,GAAEW,MAAO,GAAEV,IAAK,EAArD,CACD","sourcesContent":["// Format function modified from nodejs\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nimport { UrlObject } from 'url'\nimport { ParsedUrlQuery } from 'querystring'\nimport * as querystring from './querystring'\n\nconst slashedProtocols = /https?|ftp|gopher|file/\n\nexport function formatUrl(urlObj: UrlObject) {\n  let { auth, hostname } = urlObj\n  let protocol = urlObj.protocol || ''\n  let pathname = urlObj.pathname || ''\n  let hash = urlObj.hash || ''\n  let query = urlObj.query || ''\n  let host: string | false = false\n\n  auth = auth ? encodeURIComponent(auth).replace(/%3A/i, ':') + '@' : ''\n\n  if (urlObj.host) {\n    host = auth + urlObj.host\n  } else if (hostname) {\n    host = auth + (~hostname.indexOf(':') ? `[${hostname}]` : hostname)\n    if (urlObj.port) {\n      host += ':' + urlObj.port\n    }\n  }\n\n  if (query && typeof query === 'object') {\n    query = String(querystring.urlQueryToSearchParams(query as ParsedUrlQuery))\n  }\n\n  let search = urlObj.search || (query && `?${query}`) || ''\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':'\n\n  if (\n    urlObj.slashes ||\n    ((!protocol || slashedProtocols.test(protocol)) && host !== false)\n  ) {\n    host = '//' + (host || '')\n    if (pathname && pathname[0] !== '/') pathname = '/' + pathname\n  } else if (!host) {\n    host = ''\n  }\n\n  if (hash && hash[0] !== '#') hash = '#' + hash\n  if (search && search[0] !== '?') search = '?' + search\n\n  pathname = pathname.replace(/[?#]/g, encodeURIComponent)\n  search = search.replace('#', '%23')\n\n  return `${protocol}${host}${pathname}${search}${hash}`\n}\n"]}