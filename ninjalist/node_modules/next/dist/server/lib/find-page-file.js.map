{"version":3,"sources":["../../../server/lib/find-page-file.ts"],"names":["isTrueCasePagePath","pagePath","pagesDir","pageSegments","split","pathSeparator","filter","Boolean","segmentExistsPromises","map","segment","i","segmentParentDir","slice","parentDirEntries","promises","readdir","includes","Promise","all","every","findPageFile","rootDir","normalizedPagePath","pageExtensions","foundPagePaths","page","extension","endsWith","relativePagePath","push","relativePagePathWithIndex","pagePathWithIndex","length","chalk","cyan"],"mappings":"uEAAA,0BACA,oDACA,qDACA,2CACA,sBACA,+E,mFAEA,cAAeA,CAAAA,kBAAf,CAAkCC,QAAlC,CAAoDC,QAApD,CAAsE,CACpE,KAAMC,CAAAA,YAAY,CAAG,oBAAUF,QAAV,EAAoBG,KAApB,CAA0BC,SAA1B,EAAyCC,MAAzC,CAAgDC,OAAhD,CAArB,CAEA,KAAMC,CAAAA,qBAAqB,CAAGL,YAAY,CAACM,GAAb,CAAiB,MAAOC,OAAP,CAAgBC,CAAhB,GAAsB,CACnE,KAAMC,CAAAA,gBAAgB,CAAG,eAAKV,QAAL,CAAe,GAAGC,YAAY,CAACU,KAAb,CAAmB,CAAnB,CAAsBF,CAAtB,CAAlB,CAAzB,CACA,KAAMG,CAAAA,gBAAgB,CAAG,KAAMC,cAASC,OAAT,CAAiBJ,gBAAjB,CAA/B,CACA,MAAOE,CAAAA,gBAAgB,CAACG,QAAjB,CAA0BP,OAA1B,CAAP,CACD,CAJ6B,CAA9B,CAMA,MAAO,CAAC,KAAMQ,CAAAA,OAAO,CAACC,GAAR,CAAYX,qBAAZ,CAAP,EAA2CY,KAA3C,CAAiDb,OAAjD,CAAP,CACD,CAEM,cAAec,CAAAA,YAAf,CACLC,OADK,CAELC,kBAFK,CAGLC,cAHK,CAImB,CACxB,KAAMC,CAAAA,cAAwB,CAAG,EAAjC,CAEA,KAAMC,CAAAA,IAAI,CAAG,2CAAoBH,kBAApB,CAAb,CAEA,IAAK,KAAMI,CAAAA,SAAX,GAAwBH,CAAAA,cAAxB,CAAwC,CACtC,GAAI,CAACD,kBAAkB,CAACK,QAAnB,CAA4B,QAA5B,CAAL,CAA4C,CAC1C,KAAMC,CAAAA,gBAAgB,CAAI,GAAEH,IAAK,IAAGC,SAAU,EAA9C,CACA,KAAM1B,CAAAA,QAAQ,CAAG,eAAKqB,OAAL,CAAcO,gBAAd,CAAjB,CAEA,GAAI,KAAM,6BAAY5B,QAAZ,CAAV,CAAiC,CAC/BwB,cAAc,CAACK,IAAf,CAAoBD,gBAApB,EACD,CACF,CAED,KAAME,CAAAA,yBAAyB,CAAG,eAAKL,IAAL,CAAY,SAAQC,SAAU,EAA9B,CAAlC,CACA,KAAMK,CAAAA,iBAAiB,CAAG,eAAKV,OAAL,CAAcS,yBAAd,CAA1B,CACA,GAAI,KAAM,6BAAYC,iBAAZ,CAAV,CAA0C,CACxCP,cAAc,CAACK,IAAf,CAAoBC,yBAApB,EACD,CACF,CAED,GAAIN,cAAc,CAACQ,MAAf,CAAwB,CAA5B,CAA+B,CAC7B,MAAO,KAAP,CACD,CAED,GAAI,EAAE,KAAMjC,CAAAA,kBAAkB,CAACyB,cAAc,CAAC,CAAD,CAAf,CAAoBH,OAApB,CAA1B,CAAJ,CAA6D,CAC3D,MAAO,KAAP,CACD,CAED,GAAIG,cAAc,CAACQ,MAAf,CAAwB,CAA5B,CAA+B,CAC7B,cACG,4BAA2BC,eAAMC,IAAN,CAC1B,eAAK,OAAL,CAAcV,cAAc,CAAC,CAAD,CAA5B,CAD0B,CAE1B,QAAOS,eAAMC,IAAN,CACP,eAAK,OAAL,CAAcV,cAAc,CAAC,CAAD,CAA5B,CADO,CAEP,oBAAmBS,eAAMC,IAAN,CAAWZ,kBAAX,CAA+B,GALtD,EAOD,CAED,MAAOE,CAAAA,cAAc,CAAC,CAAD,CAArB,CACD","sourcesContent":["import { join, sep as pathSeparator, normalize } from 'path'\nimport chalk from 'chalk'\nimport { isWriteable } from '../../build/is-writeable'\nimport { warn } from '../../build/output/log'\nimport { promises } from 'fs'\nimport { denormalizePagePath } from '../../next-server/server/normalize-page-path'\n\nasync function isTrueCasePagePath(pagePath: string, pagesDir: string) {\n  const pageSegments = normalize(pagePath).split(pathSeparator).filter(Boolean)\n\n  const segmentExistsPromises = pageSegments.map(async (segment, i) => {\n    const segmentParentDir = join(pagesDir, ...pageSegments.slice(0, i))\n    const parentDirEntries = await promises.readdir(segmentParentDir)\n    return parentDirEntries.includes(segment)\n  })\n\n  return (await Promise.all(segmentExistsPromises)).every(Boolean)\n}\n\nexport async function findPageFile(\n  rootDir: string,\n  normalizedPagePath: string,\n  pageExtensions: string[]\n): Promise<string | null> {\n  const foundPagePaths: string[] = []\n\n  const page = denormalizePagePath(normalizedPagePath)\n\n  for (const extension of pageExtensions) {\n    if (!normalizedPagePath.endsWith('/index')) {\n      const relativePagePath = `${page}.${extension}`\n      const pagePath = join(rootDir, relativePagePath)\n\n      if (await isWriteable(pagePath)) {\n        foundPagePaths.push(relativePagePath)\n      }\n    }\n\n    const relativePagePathWithIndex = join(page, `index.${extension}`)\n    const pagePathWithIndex = join(rootDir, relativePagePathWithIndex)\n    if (await isWriteable(pagePathWithIndex)) {\n      foundPagePaths.push(relativePagePathWithIndex)\n    }\n  }\n\n  if (foundPagePaths.length < 1) {\n    return null\n  }\n\n  if (!(await isTrueCasePagePath(foundPagePaths[0], rootDir))) {\n    return null\n  }\n\n  if (foundPagePaths.length > 1) {\n    warn(\n      `Duplicate page detected. ${chalk.cyan(\n        join('pages', foundPagePaths[0])\n      )} and ${chalk.cyan(\n        join('pages', foundPagePaths[1])\n      )} both resolve to ${chalk.cyan(normalizedPagePath)}.`\n    )\n  }\n\n  return foundPagePaths[0]\n}\n"]}