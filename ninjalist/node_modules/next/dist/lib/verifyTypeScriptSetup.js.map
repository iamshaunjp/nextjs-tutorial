{"version":3,"sources":["../../lib/verifyTypeScriptSetup.ts"],"names":["verifyTypeScriptSetup","dir","pagesDir","typeCheckPreflight","tsConfigPath","path","join","intent","firstTimeSetup","deps","ts","resolvedTypeScript","err","TypeScriptCompileError","console","error","chalk","red","message","process","exit","FatalTypeScriptError"],"mappings":"yFAAA,oDACA,kDACA,uEACA,qEACA,+EAIA,uDACA,2EACA,+EACA,mF,w4BAEO,cAAeA,CAAAA,qBAAf,CACLC,GADK,CAELC,QAFK,CAGLC,kBAHK,CAI+B,CACpC,KAAMC,CAAAA,YAAY,CAAGC,cAAKC,IAAL,CAAUL,GAAV,CAAe,eAAf,CAArB,CAEA,GAAI,CACF;AACA,KAAMM,CAAAA,MAAM,CAAG,KAAM,6CAAoBN,GAApB,CAAyBC,QAAzB,CAArB,CACA,GAAI,CAACK,MAAL,CAAa,CACX,MAAO,MAAP,CACD,CACD,KAAMC,CAAAA,cAAc,CAAGD,MAAM,CAACC,cAA9B,CAEA;AACA,KAAMC,CAAAA,IAA2B,CAAG,KAAM,uDAAyBR,GAAzB,CAA1C,CAEA;AACA,KAAMS,CAAAA,EAAE,CAAI,yBACVD,IAAI,CAACE,kBADK,gDAAZ,CAIA;AACA,KAAM,2DAA2BD,EAA3B,CAA+BN,YAA/B,CAA6CI,cAA7C,CAAN,CACA;AACA;AACA,KAAM,uDAAyBP,GAAzB,CAAN,CAEA,GAAIE,kBAAJ,CAAwB,CACtB;AACA,MAAO,MAAM,+BAAaO,EAAb,CAAiBT,GAAjB,CAAsBG,YAAtB,CAAb,CACD,CACD,MAAO,KAAP,CACD,CAAC,MAAOQ,GAAP,CAAY,CACZ;AACA,GAAIA,GAAG,WAAYC,+CAAnB,CAA2C,CACzCC,OAAO,CAACC,KAAR,CAAcC,eAAMC,GAAN,CAAU,sBAAV,CAAd,EACAH,OAAO,CAACC,KAAR,CAAcH,GAAG,CAACM,OAAlB,EACAC,OAAO,CAACC,IAAR,CAAa,CAAb,EACD,CAJD,IAIO,IAAIR,GAAG,WAAYS,2CAAnB,CAAyC,CAC9CP,OAAO,CAACC,KAAR,CAAcH,GAAG,CAACM,OAAlB,EACAC,OAAO,CAACC,IAAR,CAAa,CAAb,EACD,CACD,KAAMR,CAAAA,GAAN,CACD,CACF","sourcesContent":["import chalk from 'chalk'\nimport path from 'path'\nimport { FatalTypeScriptError } from './typescript/FatalTypeScriptError'\nimport { getTypeScriptIntent } from './typescript/getTypeScriptIntent'\nimport {\n  hasNecessaryDependencies,\n  NecessaryDependencies,\n} from './typescript/hasNecessaryDependencies'\nimport { runTypeCheck, TypeCheckResult } from './typescript/runTypeCheck'\nimport { TypeScriptCompileError } from './typescript/TypeScriptCompileError'\nimport { writeAppTypeDeclarations } from './typescript/writeAppTypeDeclarations'\nimport { writeConfigurationDefaults } from './typescript/writeConfigurationDefaults'\n\nexport async function verifyTypeScriptSetup(\n  dir: string,\n  pagesDir: string,\n  typeCheckPreflight: boolean\n): Promise<TypeCheckResult | boolean> {\n  const tsConfigPath = path.join(dir, 'tsconfig.json')\n\n  try {\n    // Check if the project uses TypeScript:\n    const intent = await getTypeScriptIntent(dir, pagesDir)\n    if (!intent) {\n      return false\n    }\n    const firstTimeSetup = intent.firstTimeSetup\n\n    // Ensure TypeScript and necessary `@types/*` are installed:\n    const deps: NecessaryDependencies = await hasNecessaryDependencies(dir)\n\n    // Load TypeScript after we're sure it exists:\n    const ts = (await import(\n      deps.resolvedTypeScript\n    )) as typeof import('typescript')\n\n    // Reconfigure (or create) the user's `tsconfig.json` for them:\n    await writeConfigurationDefaults(ts, tsConfigPath, firstTimeSetup)\n    // Write out the necessary `next-env.d.ts` file to correctly register\n    // Next.js' types:\n    await writeAppTypeDeclarations(dir)\n\n    if (typeCheckPreflight) {\n      // Verify the project passes type-checking before we go to webpack phase:\n      return await runTypeCheck(ts, dir, tsConfigPath)\n    }\n    return true\n  } catch (err) {\n    // These are special errors that should not show a stack trace:\n    if (err instanceof TypeScriptCompileError) {\n      console.error(chalk.red('Failed to compile.\\n'))\n      console.error(err.message)\n      process.exit(1)\n    } else if (err instanceof FatalTypeScriptError) {\n      console.error(err.message)\n      process.exit(1)\n    }\n    throw err\n  }\n}\n"]}