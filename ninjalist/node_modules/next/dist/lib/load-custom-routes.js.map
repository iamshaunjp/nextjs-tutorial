{"version":3,"sources":["../../lib/load-custom-routes.ts"],"names":["allowedStatusCodes","Set","getRedirectStatus","route","statusCode","permanent","PERMANENT_REDIRECT_STATUS","TEMPORARY_REDIRECT_STATUS","normalizeRouteRegex","regex","replace","checkRedirect","invalidParts","hadInvalidStatus","has","push","checkHeader","Array","isArray","headers","header","key","value","tryParsePath","handleUrl","result","routePath","parsedDestination","pathname","hash","tokens","pathToRegexp","parse","tokensToRegexp","err","errMatches","message","match","position","parseInt","console","error","fill","join","checkCustomRoutes","routes","type","Error","numInvalidRoutes","isRedirect","allowedKeys","JSON","stringify","basePath","destination","startsWith","source","keys","Object","invalidKeys","filter","locale","_route","sourceTokens","unnamedInDest","token","name","unnamedIndex","RegExp","add","size","destTokens","destinationParseFailed","sourceSegments","map","item","Boolean","invalidDestSegments","hasInvalidKeys","length","hasInvalidParts","processRoutes","config","_routes","newRoutes","defaultLocales","i18n","domains","defaultLocale","base","http","domain","r","srcBasePath","isExternal","destBasePath","forEach","locales","trailingSlash","loadRedirects","redirects","loadRewrites","rewrites","loadHeaders","loadCustomRoutes","Promise","all","unshift","undefined","internal"],"mappings":"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","sourcesContent":["import { parse as parseUrl } from 'url'\nimport { NextConfig } from '../next-server/server/config'\nimport * as pathToRegexp from 'next/dist/compiled/path-to-regexp'\nimport escapeStringRegexp from 'next/dist/compiled/escape-string-regexp'\nimport {\n  PERMANENT_REDIRECT_STATUS,\n  TEMPORARY_REDIRECT_STATUS,\n} from '../next-server/lib/constants'\n\nexport type Rewrite = {\n  source: string\n  destination: string\n  basePath?: false\n  locale?: false\n}\n\nexport type Header = {\n  source: string\n  basePath?: false\n  locale?: false\n  headers: Array<{ key: string; value: string }>\n}\n\n// internal type used for validation (not user facing)\nexport type Redirect = Rewrite & {\n  statusCode?: number\n  permanent?: boolean\n}\n\nexport const allowedStatusCodes = new Set([301, 302, 303, 307, 308])\n\nexport function getRedirectStatus(route: {\n  statusCode?: number\n  permanent?: boolean\n}): number {\n  return (\n    route.statusCode ||\n    (route.permanent ? PERMANENT_REDIRECT_STATUS : TEMPORARY_REDIRECT_STATUS)\n  )\n}\n\nexport function normalizeRouteRegex(regex: string) {\n  // clean up un-necessary escaping from regex.source which turns / into \\\\/\n  return regex.replace(/\\\\\\//g, '/')\n}\n\nfunction checkRedirect(\n  route: Redirect\n): { invalidParts: string[]; hadInvalidStatus: boolean } {\n  const invalidParts: string[] = []\n  let hadInvalidStatus: boolean = false\n\n  if (route.statusCode && !allowedStatusCodes.has(route.statusCode)) {\n    hadInvalidStatus = true\n    invalidParts.push(`\\`statusCode\\` is not undefined or valid statusCode`)\n  }\n  if (typeof route.permanent !== 'boolean' && !route.statusCode) {\n    invalidParts.push(`\\`permanent\\` is not set to \\`true\\` or \\`false\\``)\n  }\n\n  return {\n    invalidParts,\n    hadInvalidStatus,\n  }\n}\n\nfunction checkHeader(route: Header): string[] {\n  const invalidParts: string[] = []\n\n  if (!Array.isArray(route.headers)) {\n    invalidParts.push('`headers` field must be an array')\n  } else {\n    for (const header of route.headers) {\n      if (!header || typeof header !== 'object') {\n        invalidParts.push(\n          \"`headers` items must be object with { key: '', value: '' }\"\n        )\n        break\n      }\n      if (typeof header.key !== 'string') {\n        invalidParts.push('`key` in header item must be string')\n        break\n      }\n      if (typeof header.value !== 'string') {\n        invalidParts.push('`value` in header item must be string')\n        break\n      }\n    }\n  }\n  return invalidParts\n}\n\ntype ParseAttemptResult = {\n  error?: boolean\n  tokens?: pathToRegexp.Token[]\n}\n\nfunction tryParsePath(route: string, handleUrl?: boolean): ParseAttemptResult {\n  const result: ParseAttemptResult = {}\n  let routePath = route\n\n  try {\n    if (handleUrl) {\n      const parsedDestination = parseUrl(route, true)\n      routePath = `${parsedDestination.pathname!}${\n        parsedDestination.hash || ''\n      }`\n    }\n\n    // Make sure we can parse the source properly\n    result.tokens = pathToRegexp.parse(routePath)\n    pathToRegexp.tokensToRegexp(result.tokens)\n  } catch (err) {\n    // If there is an error show our err.sh but still show original error or a formatted one if we can\n    const errMatches = err.message.match(/at (\\d{0,})/)\n\n    if (errMatches) {\n      const position = parseInt(errMatches[1], 10)\n      console.error(\n        `\\nError parsing \\`${route}\\` ` +\n          `https://err.sh/vercel/next.js/invalid-route-source\\n` +\n          `Reason: ${err.message}\\n\\n` +\n          `  ${routePath}\\n` +\n          `  ${new Array(position).fill(' ').join('')}^\\n`\n      )\n    } else {\n      console.error(\n        `\\nError parsing ${route} https://err.sh/vercel/next.js/invalid-route-source`,\n        err\n      )\n    }\n    result.error = true\n  }\n\n  return result\n}\n\nexport type RouteType = 'rewrite' | 'redirect' | 'header'\n\nfunction checkCustomRoutes(\n  routes: Redirect[] | Header[] | Rewrite[],\n  type: RouteType\n): void {\n  if (!Array.isArray(routes)) {\n    throw new Error(\n      `${type}s must return an array, received ${typeof routes}.\\n` +\n        `See here for more info: https://err.sh/next.js/routes-must-be-array`\n    )\n  }\n\n  let numInvalidRoutes = 0\n  let hadInvalidStatus = false\n\n  const isRedirect = type === 'redirect'\n  let allowedKeys: Set<string>\n\n  if (type === 'rewrite' || isRedirect) {\n    allowedKeys = new Set([\n      'source',\n      'destination',\n      'basePath',\n      'locale',\n      ...(isRedirect ? ['statusCode', 'permanent'] : []),\n    ])\n  } else {\n    allowedKeys = new Set(['source', 'headers', 'basePath', 'locale'])\n  }\n\n  for (const route of routes) {\n    if (!route || typeof route !== 'object') {\n      console.error(\n        `The route ${JSON.stringify(\n          route\n        )} is not a valid object with \\`source\\` and \\`${\n          type === 'header' ? 'headers' : 'destination'\n        }\\``\n      )\n      numInvalidRoutes++\n      continue\n    }\n\n    if (\n      type === 'rewrite' &&\n      (route as Rewrite).basePath === false &&\n      !(\n        (route as Rewrite).destination.startsWith('http://') ||\n        (route as Rewrite).destination.startsWith('https://')\n      )\n    ) {\n      console.error(\n        `The route ${\n          (route as Rewrite).source\n        } rewrites urls outside of the basePath. Please use a destination that starts with \\`http://\\` or \\`https://\\` https://err.sh/vercel/next.js/invalid-external-rewrite.md`\n      )\n      numInvalidRoutes++\n      continue\n    }\n\n    const keys = Object.keys(route)\n    const invalidKeys = keys.filter((key) => !allowedKeys.has(key))\n    const invalidParts: string[] = []\n\n    if (typeof route.basePath !== 'undefined' && route.basePath !== false) {\n      invalidParts.push('`basePath` must be undefined or false')\n    }\n\n    if (typeof route.locale !== 'undefined' && route.locale !== false) {\n      invalidParts.push('`locale` must be undefined or false')\n    }\n\n    if (!route.source) {\n      invalidParts.push('`source` is missing')\n    } else if (typeof route.source !== 'string') {\n      invalidParts.push('`source` is not a string')\n    } else if (!route.source.startsWith('/')) {\n      invalidParts.push('`source` does not start with /')\n    }\n\n    if (type === 'header') {\n      invalidParts.push(...checkHeader(route as Header))\n    } else {\n      let _route = route as Rewrite | Redirect\n      if (!_route.destination) {\n        invalidParts.push('`destination` is missing')\n      } else if (typeof _route.destination !== 'string') {\n        invalidParts.push('`destination` is not a string')\n      } else if (\n        type === 'rewrite' &&\n        !_route.destination.match(/^(\\/|https:\\/\\/|http:\\/\\/)/)\n      ) {\n        invalidParts.push(\n          '`destination` does not start with `/`, `http://`, or `https://`'\n        )\n      }\n    }\n\n    if (type === 'redirect') {\n      const result = checkRedirect(route as Redirect)\n      hadInvalidStatus = hadInvalidStatus || result.hadInvalidStatus\n      invalidParts.push(...result.invalidParts)\n    }\n\n    let sourceTokens: pathToRegexp.Token[] | undefined\n\n    if (typeof route.source === 'string' && route.source.startsWith('/')) {\n      // only show parse error if we didn't already show error\n      // for not being a string\n      const { tokens, error } = tryParsePath(route.source)\n\n      if (error) {\n        invalidParts.push('`source` parse failed')\n      }\n      sourceTokens = tokens\n    }\n\n    // make sure no unnamed patterns are attempted to be used in the\n    // destination as this can cause confusion and is not allowed\n    if (typeof (route as Rewrite).destination === 'string') {\n      if (\n        (route as Rewrite).destination.startsWith('/') &&\n        Array.isArray(sourceTokens)\n      ) {\n        const unnamedInDest = new Set()\n\n        for (const token of sourceTokens) {\n          if (typeof token === 'object' && typeof token.name === 'number') {\n            const unnamedIndex = new RegExp(`:${token.name}(?!\\\\d)`)\n            if ((route as Rewrite).destination.match(unnamedIndex)) {\n              unnamedInDest.add(`:${token.name}`)\n            }\n          }\n        }\n\n        if (unnamedInDest.size > 0) {\n          invalidParts.push(\n            `\\`destination\\` has unnamed params ${[...unnamedInDest].join(\n              ', '\n            )}`\n          )\n        } else {\n          const {\n            tokens: destTokens,\n            error: destinationParseFailed,\n          } = tryParsePath((route as Rewrite).destination, true)\n\n          if (destinationParseFailed) {\n            invalidParts.push('`destination` parse failed')\n          } else {\n            const sourceSegments = new Set(\n              sourceTokens\n                .map((item) => typeof item === 'object' && item.name)\n                .filter(Boolean)\n            )\n            const invalidDestSegments = new Set()\n\n            for (const token of destTokens!) {\n              if (\n                typeof token === 'object' &&\n                !sourceSegments.has(token.name)\n              ) {\n                invalidDestSegments.add(token.name)\n              }\n            }\n\n            if (invalidDestSegments.size) {\n              invalidParts.push(\n                `\\`destination\\` has segments not in \\`source\\` (${[\n                  ...invalidDestSegments,\n                ].join(', ')})`\n              )\n            }\n          }\n        }\n      }\n    }\n\n    const hasInvalidKeys = invalidKeys.length > 0\n    const hasInvalidParts = invalidParts.length > 0\n\n    if (hasInvalidKeys || hasInvalidParts) {\n      console.error(\n        `${invalidParts.join(', ')}${\n          invalidKeys.length\n            ? (hasInvalidParts ? ',' : '') +\n              ` invalid field${invalidKeys.length === 1 ? '' : 's'}: ` +\n              invalidKeys.join(',')\n            : ''\n        } for route ${JSON.stringify(route)}`\n      )\n      numInvalidRoutes++\n    }\n  }\n\n  if (numInvalidRoutes > 0) {\n    if (hadInvalidStatus) {\n      console.error(\n        `\\nValid redirect statusCode values are ${[...allowedStatusCodes].join(\n          ', '\n        )}`\n      )\n    }\n    console.error()\n\n    throw new Error(`Invalid ${type}${numInvalidRoutes === 1 ? '' : 's'} found`)\n  }\n}\n\nexport interface CustomRoutes {\n  headers: Header[]\n  rewrites: Rewrite[]\n  redirects: Redirect[]\n}\n\nfunction processRoutes<T>(\n  routes: T,\n  config: NextConfig,\n  type: 'redirect' | 'rewrite' | 'header'\n): T {\n  const _routes = (routes as any) as Array<{\n    source: string\n    locale?: false\n    basePath?: false\n    destination?: string\n  }>\n  const newRoutes: typeof _routes = []\n  const defaultLocales: Array<{\n    locale: string\n    base: string\n  }> = []\n\n  if (config.i18n && type === 'redirect') {\n    for (const item of config.i18n?.domains || []) {\n      defaultLocales.push({\n        locale: item.defaultLocale,\n        base: `http${item.http ? '' : 's'}://${item.domain}`,\n      })\n    }\n\n    defaultLocales.push({\n      locale: config.i18n.defaultLocale,\n      base: '',\n    })\n  }\n\n  for (const r of _routes) {\n    const srcBasePath =\n      config.basePath && r.basePath !== false ? config.basePath : ''\n    const isExternal = !r.destination?.startsWith('/')\n    const destBasePath = srcBasePath && !isExternal ? srcBasePath : ''\n\n    if (config.i18n && r.locale !== false) {\n      defaultLocales.forEach((item) => {\n        let destination\n\n        if (r.destination) {\n          destination = item.base\n            ? `${item.base}${destBasePath}${r.destination}`\n            : `${destBasePath}${r.destination}`\n        }\n\n        newRoutes.push({\n          ...r,\n          destination,\n          source: `${srcBasePath}/${item.locale}${r.source}`,\n        })\n      })\n\n      r.source = `/:nextInternalLocale(${config.i18n.locales\n        .map((locale: string) => escapeStringRegexp(locale))\n        .join('|')})${\n        r.source === '/' && !config.trailingSlash ? '' : r.source\n      }`\n\n      if (r.destination && r.destination?.startsWith('/')) {\n        r.destination = `/:nextInternalLocale${\n          r.destination === '/' && !config.trailingSlash ? '' : r.destination\n        }`\n      }\n    }\n    r.source = `${srcBasePath}${r.source}`\n\n    if (r.destination) {\n      r.destination = `${destBasePath}${r.destination}`\n    }\n    newRoutes.push(r)\n  }\n  return (newRoutes as any) as T\n}\n\nasync function loadRedirects(config: NextConfig) {\n  if (typeof config.redirects !== 'function') {\n    return []\n  }\n  let redirects = await config.redirects()\n  checkCustomRoutes(redirects, 'redirect')\n  return processRoutes(redirects, config, 'redirect')\n}\n\nasync function loadRewrites(config: NextConfig) {\n  if (typeof config.rewrites !== 'function') {\n    return []\n  }\n  let rewrites = await config.rewrites()\n  checkCustomRoutes(rewrites, 'rewrite')\n  return processRoutes(rewrites, config, 'rewrite')\n}\n\nasync function loadHeaders(config: NextConfig) {\n  if (typeof config.headers !== 'function') {\n    return []\n  }\n  let headers = await config.headers()\n  checkCustomRoutes(headers, 'header')\n  return processRoutes(headers, config, 'header')\n}\n\nexport default async function loadCustomRoutes(\n  config: NextConfig\n): Promise<CustomRoutes> {\n  const [headers, rewrites, redirects] = await Promise.all([\n    loadHeaders(config),\n    loadRewrites(config),\n    loadRedirects(config),\n  ])\n\n  if (config.trailingSlash) {\n    redirects.unshift(\n      {\n        source: '/:file((?!\\\\.well-known(?:/.*)?)(?:[^/]+/)*[^/]+\\\\.\\\\w+)/',\n        destination: '/:file',\n        permanent: true,\n        locale: config.i18n ? false : undefined,\n        internal: true,\n      } as Redirect,\n      {\n        source: '/:notfile((?!\\\\.well-known(?:/.*)?)(?:[^/]+/)*[^/\\\\.]+)',\n        destination: '/:notfile/',\n        permanent: true,\n        locale: config.i18n ? false : undefined,\n        internal: true,\n      } as Redirect\n    )\n    if (config.basePath) {\n      redirects.unshift({\n        source: config.basePath,\n        destination: config.basePath + '/',\n        permanent: true,\n        basePath: false,\n        locale: config.i18n ? false : undefined,\n        internal: true,\n      } as Redirect)\n    }\n  } else {\n    redirects.unshift({\n      source: '/:path+/',\n      destination: '/:path+',\n      permanent: true,\n      locale: config.i18n ? false : undefined,\n      internal: true,\n    } as Redirect)\n    if (config.basePath) {\n      redirects.unshift({\n        source: config.basePath + '/',\n        destination: config.basePath,\n        permanent: true,\n        basePath: false,\n        locale: config.i18n ? false : undefined,\n        internal: true,\n      } as Redirect)\n    }\n  }\n\n  return {\n    headers,\n    rewrites,\n    redirects,\n  }\n}\n"]}