{"version":3,"sources":["../../../lib/typescript/getTypeScriptConfiguration.ts"],"names":["getTypeScriptConfiguration","ts","tsConfigPath","formatDiagnosticsHost","getCanonicalFileName","fileName","getCurrentDirectory","sys","getNewLine","os","EOL","config","error","readConfigFile","readFile","FatalTypeScriptError","formatDiagnostic","result","parseJsonConfigFileContent","path","dirname","errors","filter","code","length","err","name","reason","message","chalk","red","bold","cyan"],"mappings":"mGAAA,oDACA,8CACA,kDACA,4D,mFAEO,cAAeA,CAAAA,0BAAf,CACLC,EADK,CAELC,YAFK,CAG4C,CACjD,GAAI,oBACF,KAAMC,CAAAA,qBAAiE,CAAG,CACxEC,oBAAoB,CAAGC,QAAD,EAAsBA,QAD4B,CAExEC,mBAAmB,CAAEL,EAAE,CAACM,GAAH,CAAOD,mBAF4C,CAGxEE,UAAU,CAAE,IAAMC,YAAGC,GAHmD,CAA1E,CAMA,KAAM,CAAEC,MAAF,CAAUC,KAAV,EAAoBX,EAAE,CAACY,cAAH,CAAkBX,YAAlB,CAAgCD,EAAE,CAACM,GAAH,CAAOO,QAAvC,CAA1B,CACA,GAAIF,KAAJ,CAAW,CACT,KAAM,IAAIG,2CAAJ,CACJd,EAAE,CAACe,gBAAH,CAAoBJ,KAApB,CAA2BT,qBAA3B,CADI,CAAN,CAGD,CAED,KAAMc,CAAAA,MAAM,CAAGhB,EAAE,CAACiB,0BAAH,CACbP,MADa,CAEbV,EAAE,CAACM,GAFU,CAGbY,cAAKC,OAAL,CAAalB,YAAb,CAHa,CAAf,CAMA,GAAIe,MAAM,CAACI,MAAX,CAAmB,CACjBJ,MAAM,CAACI,MAAP,CAAgBJ,MAAM,CAACI,MAAP,CAAcC,MAAd,CACd,CAAC,CAAEC,IAAF,CAAD,GACE;AACAA,IAAI,GAAK,KAHG,CAAhB,CAKD,CAED,mBAAIN,MAAM,CAACI,MAAX,SAAI,eAAeG,MAAnB,CAA2B,CACzB,KAAM,IAAIT,2CAAJ,CACJd,EAAE,CAACe,gBAAH,CAAoBC,MAAM,CAACI,MAAP,CAAc,CAAd,CAApB,CAAsClB,qBAAtC,CADI,CAAN,CAGD,CAED,MAAOc,CAAAA,MAAP,CACD,CAAC,MAAOQ,GAAP,CAAY,CACZ,GAAI,CAAAA,GAAG,MAAH,QAAAA,GAAG,CAAEC,IAAL,IAAc,aAAlB,CAAiC,kBAC/B,KAAMC,CAAAA,MAAM,CAAG,oBAAQF,GAAR,cAAQA,GAAG,CAAEG,OAAb,qBAAwB,EAAxB,CAAf,CACA,KAAM,IAAIb,2CAAJ,CACJc,eAAMC,GAAN,CAAUC,IAAV,CACE,iBADF,CAEEF,eAAMG,IAAN,CAAW,eAAX,EACE,GADF,CAEE,2DAJJ,EAKIL,MANA,CAAN,CAQD,CACD,KAAMF,CAAAA,GAAN,CACD,CACF","sourcesContent":["import chalk from 'chalk'\nimport os from 'os'\nimport path from 'path'\nimport { FatalTypeScriptError } from './FatalTypeScriptError'\n\nexport async function getTypeScriptConfiguration(\n  ts: typeof import('typescript'),\n  tsConfigPath: string\n): Promise<import('typescript').ParsedCommandLine> {\n  try {\n    const formatDiagnosticsHost: import('typescript').FormatDiagnosticsHost = {\n      getCanonicalFileName: (fileName: string) => fileName,\n      getCurrentDirectory: ts.sys.getCurrentDirectory,\n      getNewLine: () => os.EOL,\n    }\n\n    const { config, error } = ts.readConfigFile(tsConfigPath, ts.sys.readFile)\n    if (error) {\n      throw new FatalTypeScriptError(\n        ts.formatDiagnostic(error, formatDiagnosticsHost)\n      )\n    }\n\n    const result = ts.parseJsonConfigFileContent(\n      config,\n      ts.sys,\n      path.dirname(tsConfigPath)\n    )\n\n    if (result.errors) {\n      result.errors = result.errors.filter(\n        ({ code }) =>\n          // No inputs were found in config file\n          code !== 18003\n      )\n    }\n\n    if (result.errors?.length) {\n      throw new FatalTypeScriptError(\n        ts.formatDiagnostic(result.errors[0], formatDiagnosticsHost)\n      )\n    }\n\n    return result\n  } catch (err) {\n    if (err?.name === 'SyntaxError') {\n      const reason = '\\n' + (err?.message ?? '')\n      throw new FatalTypeScriptError(\n        chalk.red.bold(\n          'Could not parse',\n          chalk.cyan('tsconfig.json') +\n            '.' +\n            ' Please make sure it contains syntactically correct JSON.'\n        ) + reason\n      )\n    }\n    throw err\n  }\n}\n"]}