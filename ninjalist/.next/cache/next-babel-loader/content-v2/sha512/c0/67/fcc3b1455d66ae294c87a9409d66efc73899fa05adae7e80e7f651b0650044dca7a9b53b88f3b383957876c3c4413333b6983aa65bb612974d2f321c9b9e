{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar _webVitals = require(\"next/dist/compiled/web-vitals\");\n\nvar initialHref = location.href;\nvar isRegistered = false;\nvar userReportHandler;\n\nfunction onReport(metric) {\n  if (userReportHandler) {\n    userReportHandler(metric);\n  } // This code is not shipped, executed, or present in the client-side\n  // JavaScript bundle unless explicitly enabled in your application.\n  //\n  // When this feature is enabled, we'll make it very clear by printing a\n  // message during the build (`next build`).\n\n\n  if (false && // This field is empty unless you explicitly configure it:\n  process.env.__NEXT_ANALYTICS_ID) {\n    var body = {\n      dsn: process.env.__NEXT_ANALYTICS_ID,\n      id: metric.id,\n      page: window.__NEXT_DATA__.page,\n      href: initialHref,\n      event_name: metric.name,\n      value: metric.value.toString(),\n      speed: 'connection' in navigator && navigator['connection'] && 'effectiveType' in navigator['connection'] ? navigator['connection']['effectiveType'] : ''\n    };\n    var blob = new Blob([new URLSearchParams(body).toString()], {\n      // This content type is necessary for `sendBeacon`:\n      type: 'application/x-www-form-urlencoded'\n    });\n    var vitalsUrl = 'https://vitals.vercel-insights.com/v1/vitals';\n    navigator.sendBeacon && navigator.sendBeacon(vitalsUrl, blob) || fetch(vitalsUrl, {\n      body: blob,\n      method: 'POST',\n      credentials: 'omit',\n      keepalive: true\n    });\n  }\n}\n\nvar _default = function _default(onPerfEntry) {\n  // Update function if it changes:\n  userReportHandler = onPerfEntry; // Only register listeners once:\n\n  if (isRegistered) {\n    return;\n  }\n\n  isRegistered = true;\n  (0, _webVitals.getCLS)(onReport);\n  (0, _webVitals.getFID)(onReport);\n  (0, _webVitals.getFCP)(onReport);\n  (0, _webVitals.getLCP)(onReport);\n  (0, _webVitals.getTTFB)(onReport);\n};\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["../../client/performance-relayer.ts"],"names":["initialHref","location","isRegistered","userReportHandler","process","body","dsn","id","metric","page","window","href","event_name","value","speed","navigator","blob","type","vitalsUrl","fetch","method","credentials","keepalive","onPerfEntry"],"mappings":";;;;;AAAA,IAAA,UAAA,GAAA,OAAA,CAAA,+BAAA,CAAA;;AAUA,IAAMA,WAAW,GAAGC,QAAQ,CAA5B,IAAA;AACA,IAAIC,YAAY,GAAhB,KAAA;AACA,IAAA,iBAAA;;AAEA,SAAA,QAAA,CAAA,MAAA,EAAwC;AACtC,MAAA,iBAAA,EAAuB;AACrBC,IAAAA,iBAAiB,CAAjBA,MAAiB,CAAjBA;AAGF,GALsC,CAKtC;AACA;AACA;AACA;AACA;;;AACA,MACEC,SACA;AACAA,EAAAA,OAAO,CAAPA,GAAAA,CAHF,mBAAA,EAIE;AACA,QAAMC,IAA4B,GAAG;AACnCC,MAAAA,GAAG,EAAEF,OAAO,CAAPA,GAAAA,CAD8B,mBAAA;AAEnCG,MAAAA,EAAE,EAAEC,MAAM,CAFyB,EAAA;AAGnCC,MAAAA,IAAI,EAAEC,MAAM,CAANA,aAAAA,CAH6B,IAAA;AAInCC,MAAAA,IAAI,EAJ+B,WAAA;AAKnCC,MAAAA,UAAU,EAAEJ,MAAM,CALiB,IAAA;AAMnCK,MAAAA,KAAK,EAAEL,MAAM,CAANA,KAAAA,CAN4B,QAM5BA,EAN4B;AAOnCM,MAAAA,KAAK,EACH,gBAAA,SAAA,IACAC,SAAS,CADT,YACS,CADT,IAEA,mBAAmBA,SAAS,CAF5B,YAE4B,CAF5B,GAGKA,SAAS,CAATA,YAAS,CAATA,CAHL,eAGKA,CAHL,GARJ;AAAqC,KAArC;AAeA,QAAMC,IAAI,GAAG,IAAA,IAAA,CAAS,CAAC,IAAA,eAAA,CAAA,IAAA,EAAV,QAAU,EAAD,CAAT,EAAiD;AAC5D;AACAC,MAAAA,IAAI,EAFN;AAA8D,KAAjD,CAAb;AAIA,QAAMC,SAAS,GAAf,8CAAA;AACEH,IAAAA,SAAS,CAATA,UAAAA,IAAwBA,SAAS,CAATA,UAAAA,CAAAA,SAAAA,EAAzB,IAAyBA,CAAxBA,IACAI,KAAK,CAAA,SAAA,EAAY;AACfd,MAAAA,IAAI,EADW,IAAA;AAEfe,MAAAA,MAAM,EAFS,MAAA;AAGfC,MAAAA,WAAW,EAHI,MAAA;AAIfC,MAAAA,SAAS,EALZ;AACkB,KAAZ,CADLP;AAQL;;;eAEeQ,S,QAAAA,CAAAA,WAAD,EAAuC;AACpD;AACApB,EAAAA,iBAAiB,GAAjBA,WAAAA,CAFoD,CAIpD;;AACA,MAAA,YAAA,EAAkB;AAChB;AAEFD;;AAAAA,EAAAA,YAAY,GAAZA,IAAAA;AAEA,GAAA,GAAA,UAAA,CAAA,MAAA,EAAA,QAAA;AACA,GAAA,GAAA,UAAA,CAAA,MAAA,EAAA,QAAA;AACA,GAAA,GAAA,UAAA,CAAA,MAAA,EAAA,QAAA;AACA,GAAA,GAAA,UAAA,CAAA,MAAA,EAAA,QAAA;AACA,GAAA,GAAA,UAAA,CAAA,OAAA,EAAA,QAAA","sourcesContent":["import {\n  getCLS,\n  getFCP,\n  getFID,\n  getLCP,\n  getTTFB,\n  Metric,\n  ReportHandler,\n} from 'next/dist/compiled/web-vitals'\n\nconst initialHref = location.href\nlet isRegistered = false\nlet userReportHandler: ReportHandler | undefined\n\nfunction onReport(metric: Metric): void {\n  if (userReportHandler) {\n    userReportHandler(metric)\n  }\n\n  // This code is not shipped, executed, or present in the client-side\n  // JavaScript bundle unless explicitly enabled in your application.\n  //\n  // When this feature is enabled, we'll make it very clear by printing a\n  // message during the build (`next build`).\n  if (\n    process.env.NODE_ENV === 'production' &&\n    // This field is empty unless you explicitly configure it:\n    process.env.__NEXT_ANALYTICS_ID\n  ) {\n    const body: Record<string, string> = {\n      dsn: process.env.__NEXT_ANALYTICS_ID,\n      id: metric.id,\n      page: window.__NEXT_DATA__.page,\n      href: initialHref,\n      event_name: metric.name,\n      value: metric.value.toString(),\n      speed:\n        'connection' in navigator &&\n        navigator['connection'] &&\n        'effectiveType' in navigator['connection']\n          ? (navigator['connection']['effectiveType'] as string)\n          : '',\n    }\n\n    const blob = new Blob([new URLSearchParams(body).toString()], {\n      // This content type is necessary for `sendBeacon`:\n      type: 'application/x-www-form-urlencoded',\n    })\n    const vitalsUrl = 'https://vitals.vercel-insights.com/v1/vitals'\n    ;(navigator.sendBeacon && navigator.sendBeacon(vitalsUrl, blob)) ||\n      fetch(vitalsUrl, {\n        body: blob,\n        method: 'POST',\n        credentials: 'omit',\n        keepalive: true,\n      })\n  }\n}\n\nexport default (onPerfEntry?: ReportHandler): void => {\n  // Update function if it changes:\n  userReportHandler = onPerfEntry\n\n  // Only register listeners once:\n  if (isRegistered) {\n    return\n  }\n  isRegistered = true\n\n  getCLS(onReport)\n  getFID(onReport)\n  getFCP(onReport)\n  getLCP(onReport)\n  getTTFB(onReport)\n}\n"]},"metadata":{},"sourceType":"script"}