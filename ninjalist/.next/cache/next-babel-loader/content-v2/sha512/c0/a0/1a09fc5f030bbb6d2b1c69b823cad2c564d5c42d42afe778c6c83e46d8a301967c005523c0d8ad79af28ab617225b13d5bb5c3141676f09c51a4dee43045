{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.closePing = closePing;\nexports.setupPing = setupPing;\nexports.currentPage = void 0;\n\nvar _eventsource = require(\"./error-overlay/eventsource\");\n/* global location */\n\n\nvar evtSource;\nvar currentPage;\nexports.currentPage = currentPage;\n\nfunction closePing() {\n  if (evtSource) evtSource.close();\n  evtSource = null;\n}\n\nfunction setupPing(assetPrefix, pathnameFn, retry) {\n  var pathname = pathnameFn(); // Make sure to only create new EventSource request if page has changed\n\n  if (pathname === currentPage && !retry) return;\n  exports.currentPage = currentPage = pathname; // close current EventSource connection\n\n  closePing();\n  var url = \"\".concat(assetPrefix, \"/_next/webpack-hmr?page=\").concat(currentPage);\n  evtSource = (0, _eventsource.getEventSourceWrapper)({\n    path: url,\n    timeout: 5000,\n    ondemand: 1\n  });\n  evtSource.addMessageListener(function (event) {\n    if (event.data.indexOf('{') === -1) return;\n\n    try {\n      var payload = JSON.parse(event.data);\n\n      if (payload.invalid) {\n        // Payload can be invalid even if the page does not exist.\n        // So, we need to make sure it exists before reloading.\n        fetch(location.href, {\n          credentials: 'same-origin'\n        }).then(function (pageRes) {\n          if (pageRes.status === 200) {\n            location.reload();\n          }\n        });\n      }\n    } catch (err) {\n      console.error('on-demand-entries failed to parse response', err);\n    }\n  });\n}","map":{"version":3,"sources":["../../../client/dev/on-demand-entries-utils.js"],"names":["evtSource","pathname","pathnameFn","closePing","url","assetPrefix","path","timeout","ondemand","event","payload","JSON","fetch","location","credentials","pageRes","console"],"mappings":";;;;;;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,6BAAA,CAAA;AADA;;;AAGA,IAAA,SAAA;AACO,IAAA,WAAA;;;AAEA,SAAA,SAAA,GAAqB;AAC1B,MAAA,SAAA,EAAeA,SAAS,CAATA,KAAAA;AACfA,EAAAA,SAAS,GAATA,IAAAA;AAGK;;AAAA,SAAA,SAAA,CAAA,WAAA,EAAA,UAAA,EAAA,KAAA,EAAmD;AACxD,MAAMC,QAAQ,GAAGC,UAAjB,EAAA,CADwD,CAGxD;;AACA,MAAID,QAAQ,KAARA,WAAAA,IAA4B,CAAhC,KAAA,EAAwC;AACxC,EAAA,OAAA,CAAA,WAAA,GAAA,WAAW,GAAX,QAAA,CALwD,CAMxD;;AACAE,EAAAA,SAAS;AAET,MAAMC,GAAG,aAAMC,WAAN,qCAAT,WAAS,CAAT;AACAL,EAAAA,SAAS,GAAG,CAAA,GAAA,YAAA,CAAA,qBAAA,EAAsB;AAAEM,IAAAA,IAAI,EAAN,GAAA;AAAaC,IAAAA,OAAO,EAApB,IAAA;AAA4BC,IAAAA,QAAQ,EAAtER;AAAkC,GAAtB,CAAZA;AAEAA,EAAAA,SAAS,CAATA,kBAAAA,CAA8BS,UAAAA,KAAD,EAAW;AACtC,QAAIA,KAAK,CAALA,IAAAA,CAAAA,OAAAA,CAAAA,GAAAA,MAA4B,CAAhC,CAAA,EAAoC;;AACpC,QAAI;AACF,UAAMC,OAAO,GAAGC,IAAI,CAAJA,KAAAA,CAAWF,KAAK,CAAhC,IAAgBE,CAAhB;;AACA,UAAID,OAAO,CAAX,OAAA,EAAqB;AACnB;AACA;AACAE,QAAAA,KAAK,CAACC,QAAQ,CAAT,IAAA,EAAgB;AACnBC,UAAAA,WAAW,EADbF;AAAqB,SAAhB,CAALA,CAAAA,IAAAA,CAESG,UAAAA,OAAD,EAAa;AACnB,cAAIA,OAAO,CAAPA,MAAAA,KAAJ,GAAA,EAA4B;AAC1BF,YAAAA,QAAQ,CAARA,MAAAA;AAEH;AANDD,SAAAA;AAQH;AAAC,KAbF,CAaE,OAAA,GAAA,EAAY;AACZI,MAAAA,OAAO,CAAPA,KAAAA,CAAAA,4CAAAA,EAAAA,GAAAA;AAEH;AAlBDhB,GAAAA;AAmBD","sourcesContent":["/* global location */\nimport { getEventSourceWrapper } from './error-overlay/eventsource'\n\nlet evtSource\nexport let currentPage\n\nexport function closePing() {\n  if (evtSource) evtSource.close()\n  evtSource = null\n}\n\nexport function setupPing(assetPrefix, pathnameFn, retry) {\n  const pathname = pathnameFn()\n\n  // Make sure to only create new EventSource request if page has changed\n  if (pathname === currentPage && !retry) return\n  currentPage = pathname\n  // close current EventSource connection\n  closePing()\n\n  const url = `${assetPrefix}/_next/webpack-hmr?page=${currentPage}`\n  evtSource = getEventSourceWrapper({ path: url, timeout: 5000, ondemand: 1 })\n\n  evtSource.addMessageListener((event) => {\n    if (event.data.indexOf('{') === -1) return\n    try {\n      const payload = JSON.parse(event.data)\n      if (payload.invalid) {\n        // Payload can be invalid even if the page does not exist.\n        // So, we need to make sure it exists before reloading.\n        fetch(location.href, {\n          credentials: 'same-origin',\n        }).then((pageRes) => {\n          if (pageRes.status === 200) {\n            location.reload()\n          }\n        })\n      }\n    } catch (err) {\n      console.error('on-demand-entries failed to parse response', err)\n    }\n  })\n}\n"]},"metadata":{},"sourceType":"script"}